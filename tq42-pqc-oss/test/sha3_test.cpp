#include <filesystem>
#include <fstream>

#include <gtest/gtest.h>

#include <pqc/sha3.h>

#include "sha3/sha3_helper.h"


TEST(SHA3, len)
{
    CIPHER_HANDLE sha3_224 = PQC_context_init_hash(PQC_CIPHER_SHA3, PQC_SHA3_224);
    EXPECT_EQ(PQC_hash_size(sha3_224), 224 / 8);
    PQC_context_close(sha3_224);

    CIPHER_HANDLE sha3_256 = PQC_context_init_hash(PQC_CIPHER_SHA3, PQC_SHA3_256);
    EXPECT_EQ(PQC_hash_size(sha3_256), 256 / 8);
    PQC_context_close(sha3_256);

    CIPHER_HANDLE sha3_384 = PQC_context_init_hash(PQC_CIPHER_SHA3, PQC_SHA3_384);
    EXPECT_EQ(PQC_hash_size(sha3_224), 384 / 8);
    PQC_context_close(sha3_384);

    CIPHER_HANDLE sha3_512 = PQC_context_init_hash(PQC_CIPHER_SHA3, PQC_SHA3_512);
    EXPECT_EQ(PQC_hash_size(sha3_512), 512 / 8);
    PQC_context_close(sha3_512);
}

TEST(SHA3, empty)
{
    uint8_t hash[512 / 8];

    CIPHER_HANDLE sha3_224 = PQC_context_init_hash(PQC_CIPHER_SHA3, PQC_SHA3_224);
    EXPECT_EQ(PQC_hash_retrieve(sha3_224, hash, 224 / 8), PQC_OK);
    uint8_t expected_224[] = {0x6b, 0x4e, 0x03, 0x42, 0x36, 0x67, 0xdb, 0xb7, 0x3b, 0x6e, 0x15, 0x45, 0x4f, 0x0e,
                              0xb1, 0xab, 0xd4, 0x59, 0x7f, 0x9a, 0x1b, 0x07, 0x8e, 0x3f, 0x5b, 0x5a, 0x6b, 0xc7};
    EXPECT_EQ(memcmp(hash, expected_224, 224 / 8), 0);
    PQC_context_close(sha3_224);

    CIPHER_HANDLE sha3_256 = PQC_context_init_hash(PQC_CIPHER_SHA3, PQC_SHA3_256);
    EXPECT_EQ(PQC_hash_retrieve(sha3_256, hash, 256 / 8), PQC_OK);
    uint8_t expected_256[] = {0xa7, 0xff, 0xc6, 0xf8, 0xbf, 0x1e, 0xd7, 0x66, 0x51, 0xc1, 0x47,
                              0x56, 0xa0, 0x61, 0xd6, 0x62, 0xf5, 0x80, 0xff, 0x4d, 0xe4, 0x3b,
                              0x49, 0xfa, 0x82, 0xd8, 0x0a, 0x4b, 0x80, 0xf8, 0x43, 0x4a};
    EXPECT_EQ(memcmp(hash, expected_256, 256 / 8), 0);
    PQC_context_close(sha3_256);

    CIPHER_HANDLE sha3_384 = PQC_context_init_hash(PQC_CIPHER_SHA3, PQC_SHA3_384);
    EXPECT_EQ(PQC_hash_retrieve(sha3_384, hash, 384 / 8), PQC_OK);
    uint8_t expected_384[] = {0x0c, 0x63, 0xa7, 0x5b, 0x84, 0x5e, 0x4f, 0x7d, 0x01, 0x10, 0x7d, 0x85,
                              0x2e, 0x4c, 0x24, 0x85, 0xc5, 0x1a, 0x50, 0xaa, 0xaa, 0x94, 0xfc, 0x61,
                              0x99, 0x5e, 0x71, 0xbb, 0xee, 0x98, 0x3a, 0x2a, 0xc3, 0x71, 0x38, 0x31,
                              0x26, 0x4a, 0xdb, 0x47, 0xfb, 0x6b, 0xd1, 0xe0, 0x58, 0xd5, 0xf0, 0x04};
    EXPECT_EQ(memcmp(hash, expected_384, 384 / 8), 0);
    PQC_context_close(sha3_384);

    CIPHER_HANDLE sha3_512 = PQC_context_init_hash(PQC_CIPHER_SHA3, PQC_SHA3_512);
    EXPECT_EQ(PQC_hash_retrieve(sha3_512, hash, 512 / 8), PQC_OK);
    uint8_t expected_512[] = {0xa6, 0x9f, 0x73, 0xcc, 0xa2, 0x3a, 0x9a, 0xc5, 0xc8, 0xb5, 0x67, 0xdc, 0x18,
                              0x5a, 0x75, 0x6e, 0x97, 0xc9, 0x82, 0x16, 0x4f, 0xe2, 0x58, 0x59, 0xe0, 0xd1,
                              0xdc, 0xc1, 0x47, 0x5c, 0x80, 0xa6, 0x15, 0xb2, 0x12, 0x3a, 0xf1, 0xf5, 0xf9,
                              0x4c, 0x11, 0xe3, 0xe9, 0x40, 0x2c, 0x3a, 0xc5, 0x58, 0xf5, 0x00, 0x19, 0x9d,
                              0x95, 0xb6, 0xd3, 0xe3, 0x01, 0x75, 0x85, 0x86, 0x28, 0x1d, 0xcd, 0x26};
    EXPECT_EQ(memcmp(hash, expected_512, 512 / 8), 0);
    PQC_context_close(sha3_512);
}

std::vector<int> message1600_steps = {1, 2, 4, 8, 10, 13, 20, 32, 64};

TEST(SHA3, sha3_224_message1600)
{
    const int sha_len = 224 / 8;
    const int message_len = 200;
    uint8_t message[message_len] = {
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3};
    uint8_t hash[sha_len];

    CIPHER_HANDLE sha3 = PQC_context_init_hash(PQC_CIPHER_SHA3, sha_len * 8);
    EXPECT_EQ(PQC_hash_update(sha3, message, message_len), PQC_OK);
    EXPECT_EQ(PQC_hash_retrieve(sha3, hash, sha_len), PQC_OK);
    uint8_t expected[] = {0x93, 0x76, 0x81, 0x6A, 0xBA, 0x50, 0x3F, 0x72, 0xF9, 0x6C, 0xE7, 0xEB, 0x65, 0xAC,
                          0x09, 0x5D, 0xEE, 0xE3, 0xBE, 0x4B, 0xF9, 0xBB, 0xC2, 0xA1, 0xCB, 0x7E, 0x11, 0xE0};

    EXPECT_EQ(memcmp(hash, expected, sha_len), 0);
    PQC_context_close(sha3);

    for (int step : message1600_steps)
    {
        sha3 = PQC_context_init_hash(PQC_CIPHER_SHA3, sha_len * 8);
        for (int i = 0; i < message_len; i += step)
        {
            EXPECT_EQ(PQC_hash_update(sha3, message + i, std::min(step, message_len - i)), PQC_OK);
            EXPECT_EQ(PQC_hash_retrieve(sha3, hash, sha_len), PQC_OK);
        }
        EXPECT_EQ(PQC_hash_retrieve(sha3, hash, sha_len), PQC_OK);
        EXPECT_EQ(memcmp(hash, expected, sha_len), 0);
        PQC_context_close(sha3);
    }
}

TEST(SHA3, sha3_256_message1600)
{
    const int sha_len = 256 / 8;
    const int message_len = 200;
    uint8_t message[message_len] = {
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3};
    uint8_t hash[sha_len];

    CIPHER_HANDLE sha3 = PQC_context_init_hash(PQC_CIPHER_SHA3, sha_len * 8);
    EXPECT_EQ(PQC_hash_update(sha3, message, message_len), PQC_OK);
    EXPECT_EQ(PQC_hash_retrieve(sha3, hash, sha_len), PQC_OK);
    uint8_t expected[] = {0x79, 0xF3, 0x8A, 0xDE, 0xC5, 0xC2, 0x03, 0x07, 0xA9, 0x8E, 0xF7,
                          0x6E, 0x83, 0x24, 0xAF, 0xBF, 0xD4, 0x6C, 0xFD, 0x81, 0xB2, 0x2E,
                          0x39, 0x73, 0xC6, 0x5F, 0xA1, 0xBD, 0x9D, 0xE3, 0x17, 0x87};

    EXPECT_EQ(memcmp(hash, expected, sha_len), 0);
    PQC_context_close(sha3);

    for (int step : message1600_steps)
    {
        sha3 = PQC_context_init_hash(PQC_CIPHER_SHA3, sha_len * 8);
        for (int i = 0; i < message_len; i += step)
        {
            EXPECT_EQ(PQC_hash_update(sha3, message + i, std::min(step, message_len - i)), PQC_OK);
            EXPECT_EQ(PQC_hash_retrieve(sha3, hash, sha_len), PQC_OK);
        }
        EXPECT_EQ(PQC_hash_retrieve(sha3, hash, sha_len), PQC_OK);
        EXPECT_EQ(memcmp(hash, expected, sha_len), 0);
        PQC_context_close(sha3);
    }
}

TEST(SHA3, sha3_384_message1600)
{
    const int sha_len = 384 / 8;
    const int message_len = 200;
    uint8_t message[message_len] = {
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3};
    uint8_t hash[sha_len];

    CIPHER_HANDLE sha3 = PQC_context_init_hash(PQC_CIPHER_SHA3, sha_len * 8);
    EXPECT_EQ(PQC_hash_update(sha3, message, message_len), PQC_OK);
    EXPECT_EQ(PQC_hash_retrieve(sha3, hash, sha_len), PQC_OK);
    uint8_t expected[] = {0x18, 0x81, 0xDE, 0x2C, 0xA7, 0xE4, 0x1E, 0xF9, 0x5D, 0xC4, 0x73, 0x2B,
                          0x8F, 0x5F, 0x00, 0x2B, 0x18, 0x9C, 0xC1, 0xE4, 0x2B, 0x74, 0x16, 0x8E,
                          0xD1, 0x73, 0x26, 0x49, 0xCE, 0x1D, 0xBC, 0xDD, 0x76, 0x19, 0x7A, 0x31,
                          0xFD, 0x55, 0xEE, 0x98, 0x9F, 0x2D, 0x70, 0x50, 0xDD, 0x47, 0x3E, 0x8F};

    EXPECT_EQ(memcmp(hash, expected, sha_len), 0);
    PQC_context_close(sha3);

    for (int step : message1600_steps)
    {
        sha3 = PQC_context_init_hash(PQC_CIPHER_SHA3, sha_len * 8);
        for (int i = 0; i < message_len; i += step)
        {
            EXPECT_EQ(PQC_hash_update(sha3, message + i, std::min(step, message_len - i)), PQC_OK);
            EXPECT_EQ(PQC_hash_retrieve(sha3, hash, sha_len), PQC_OK);
        }
        EXPECT_EQ(PQC_hash_retrieve(sha3, hash, sha_len), PQC_OK);
        EXPECT_EQ(memcmp(hash, expected, sha_len), 0);
        PQC_context_close(sha3);
    }
}

TEST(SHA3, sha3_512_message1600)
{
    const int sha_len = 512 / 8;
    const int message_len = 200;
    uint8_t message[message_len] = {
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3,
        0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3, 0xA3};
    uint8_t hash[sha_len];

    CIPHER_HANDLE sha3 = PQC_context_init_hash(PQC_CIPHER_SHA3, sha_len * 8);
    EXPECT_EQ(PQC_hash_update(sha3, message, message_len), PQC_OK);
    EXPECT_EQ(PQC_hash_retrieve(sha3, hash, sha_len), PQC_OK);
    uint8_t expected[] = {0xE7, 0x6D, 0xFA, 0xD2, 0x20, 0x84, 0xA8, 0xB1, 0x46, 0x7F, 0xCF, 0x2F, 0xFA,
                          0x58, 0x36, 0x1B, 0xEC, 0x76, 0x28, 0xED, 0xF5, 0xF3, 0xFD, 0xC0, 0xE4, 0x80,
                          0x5D, 0xC4, 0x8C, 0xAE, 0xEC, 0xA8, 0x1B, 0x7C, 0x13, 0xC3, 0x0A, 0xDF, 0x52,
                          0xA3, 0x65, 0x95, 0x84, 0x73, 0x9A, 0x2D, 0xF4, 0x6B, 0xE5, 0x89, 0xC5, 0x1C,
                          0xA1, 0xA4, 0xA8, 0x41, 0x6D, 0xF6, 0x54, 0x5A, 0x1C, 0xE8, 0xBA, 0x00};

    EXPECT_EQ(memcmp(hash, expected, sha_len), 0);
    PQC_context_close(sha3);

    for (int step : message1600_steps)
    {
        sha3 = PQC_context_init_hash(PQC_CIPHER_SHA3, sha_len * 8);
        for (int i = 0; i < message_len; i += step)
        {
            EXPECT_EQ(PQC_hash_update(sha3, message + i, std::min(step, message_len - i)), PQC_OK);
            EXPECT_EQ(PQC_hash_retrieve(sha3, hash, sha_len), PQC_OK);
        }
        EXPECT_EQ(PQC_hash_retrieve(sha3, hash, sha_len), PQC_OK);
        EXPECT_EQ(memcmp(hash, expected, sha_len), 0);
        PQC_context_close(sha3);
    }
}

TEST(SHA3, shake128_check_HASH)
{
    // const int sha_len = 512 / 8;
    std::vector<uint8_t> messageForCheck = {
        28,  210, 199, 26,  82,  227, 242, 166, 32,  23,  62,  145, 95,  23,  100, 141, 204, 67,  68,  62,  247, 135,
        84,  48,  44,  107, 68,  207, 71,  218, 245, 39,  18,  7,   198, 197, 63,  204, 1,   124, 129, 79,  153, 35,
        251, 141, 135, 214, 44,  82,  156, 102, 113, 174, 35,  239, 60,  181, 41,  85,  210, 29,  200, 117, 100, 182,
        252, 45,  188, 106, 162, 20,  135, 118, 21,  15,  181, 108, 134, 155, 170, 174, 246, 158, 192, 17,  156, 177,
        125, 209, 247, 162, 78,  109, 109, 210, 44,  205, 84,  107, 228, 75,  120, 246, 180, 17,  124, 44,  10,  1,
        34,  70,  11,  177, 148, 22,  255, 163, 195, 241, 235, 174, 74,  67,  244, 78,  82,  198, 17,  58,  201, 93,
        46,  96,  8,   62,  93,  122, 39,  90,  48,  227, 222, 194, 99,  8,   153, 189, 96,  239, 159, 142, 198, 205,
        243, 181, 207, 73,  169, 168, 105, 228, 18,  172, 147, 71,  211, 91,  254, 182, 228, 110, 24,  39,  59,  72,
        74,  197, 174, 104, 199, 84,  180, 58,  47,  199, 86,  167, 217, 19,  148, 35,  194, 32,  63,  152, 226, 219,
        71,  195, 222, 224, 215, 165, 80,  190, 198, 244, 218, 81,  29,  254, 114, 41,  238, 227, 4,   195, 68,  1,
        183, 97,  208, 3,   181, 30,  103, 106, 228, 146, 86,  4,   219, 158, 55,  44,  252, 82,  195, 125, 0,   232,
        13,  222, 0,   90,  29,  193, 210, 35,  15,  151, 9,   143, 128, 54,  67,  233, 103, 164, 192, 83,  57,  37,
        60,  154, 86,  224, 107, 188, 241, 173, 103, 43,  218, 232, 210, 37,  227, 22,  114, 184, 219, 96,  177, 30,
        215, 158, 23,  237, 160, 151, 100, 213, 205, 219, 127, 61,  157, 100, 0,   248, 29,  76,  51,  29,  245, 28,
        194, 104, 89,  39,  128, 180, 80,  243, 219, 167, 237, 111, 116, 127, 158, 36,  126, 186, 32,  106, 152, 149,
        87,  186, 249, 171, 238, 35,  20,  110, 37,  144, 178, 249, 238, 192, 194, 253, 156, 17,  223, 245, 130, 225,
        110, 175, 239, 172, 208, 180, 59,  24,  51,  44,  13,  54,  113, 159, 226, 125, 1,   34,  212, 41,  165, 137,
        224, 229, 158, 223, 231, 230, 181, 125, 89,  43,  137, 66,  43,  243, 197, 38,  42,  51,  231, 186, 5,   12,
        200, 160, 248, 240, 168, 56,  212, 239, 191, 191, 248, 113, 139, 68,  71,  14,  226, 99,  221, 222, 90,  68,
        115, 55,  16,  54,  35,  173, 20,  198, 207, 43,  184, 201, 133, 47,  220, 157, 60,  31,  188, 41,  66,  204,
        109, 84,  66,  117, 53,  168, 205, 185, 52,  77,  80,  212, 39,  15,  50,  92,  48,  189, 81,  106, 29,  81,
        23,  67,  177, 237, 30,  41,  231, 171, 3,   241, 192, 127, 75,  70,  41,  167, 249, 162, 18,  243, 177, 60,
        186, 102, 82,  245, 187, 145, 250, 80,  249, 140, 153, 237, 169, 116, 170, 136};

    std::vector<uint8_t> out(messageForCheck.size());

    CIPHER_HANDLE sha3 = PQC_context_init_hash(PQC_CIPHER_SHA3, PQC_SHAKE_128);
    EXPECT_EQ(PQC_hash_update(sha3, (uint8_t *)"1234567890", 10), PQC_OK);
    EXPECT_EQ(PQC_hash_retrieve(sha3, out.data(), out.size()), PQC_OK);

    EXPECT_EQ(out, messageForCheck);
}

TEST(SHA3, shake256_check_HASH)
{
    std::vector<uint8_t> messageForCheck = {
        205, 101, 164, 229, 83,  64,  91,  80,  194, 243, 112, 1,   234, 129, 144, 95,  54,  214, 80,  204, 119, 95,
        218, 216, 152, 178, 227, 67,  100, 76,  179, 219, 37,  107, 192, 233, 179, 1,   247, 242, 26,  219, 170, 250,
        217, 121, 49,  191, 41,  11,  51,  214, 57,  22,  134, 186, 17,  63,  163, 254, 152, 167, 170, 245, 125, 216,
        158, 51,  74,  128, 19,  212, 117, 46,  101, 219, 156, 53,  12,  128, 52,  29,  51,  57,  57,  96,  79,  98,
        221, 237, 241, 250, 62,  201, 189, 236, 185, 4,   73,  2,   44,  138, 79,  111, 255, 199, 122, 220, 122, 164,
        35,  176, 114, 94,  42,  219, 172, 130, 171, 7,   41,  181, 146, 68,  16,  25,  36,  255, 73,  170, 245, 103,
        42,  5,   208, 16,  252, 164, 211, 196, 173, 180, 84,  216, 137, 16,  214, 178, 217, 254, 162, 133, 153, 55,
        74,  172, 161, 157, 139, 201, 100, 79,  128, 68,  170, 148, 8,   148, 190, 5,   146, 176, 115, 174, 213, 75,
        189, 108, 192, 166, 197, 155, 182, 190, 208, 29,  241, 143, 211, 232, 116, 230, 33,  161, 199, 22,  21,  51,
        242, 240, 175, 166, 238, 189, 193, 123, 186, 185, 177, 176, 110, 66,  10,  31,  114, 54,  84,  52,  196, 229,
        135, 213, 67,  250, 246, 94,  207, 135, 138, 174, 81,  93,  70,  202, 64,  16,  106, 123, 160, 135, 75,  135,
        221, 90,  74,  180, 220, 71,  32,  185, 136, 9,   205, 215, 86,  110, 102, 69,  192, 196, 171, 221, 61,  110,
        51,  201, 200, 200, 7,   188, 162, 29,  152, 62,  183, 35,  161, 85,  20,  158, 172, 70,  100, 113, 39,  192,
        107, 173, 3,   186, 160, 29,  70,  79,  13,  8,   168, 118, 53,  215, 63,  133, 191, 71,  181, 58,  131, 86,
        2,   229, 50,  78,  71,  174, 120, 167, 124, 69,  100, 203, 38,  4,   126, 120, 55,  190, 152, 121, 217, 204,
        185, 128, 68,  146, 196, 168, 62,  193, 194, 66,  61,  200, 179, 62,  13,  185, 117, 23,  91,  66,  106, 181,
        181, 210, 190, 102, 10,  211, 94,  190, 73,  27,  252, 81,  253, 150, 121, 51,  198, 176, 59,  148, 198, 209,
        64,  114, 10,  130, 97,  133, 240, 133, 99,  48,  148, 178, 88,  17,  144, 111, 220, 219, 213, 232, 24,  242,
        212, 109, 238, 252, 167, 250, 123, 114, 65,  253, 118, 160, 219, 168, 100, 0,   126, 162, 214, 208, 227, 130,
        43,  255, 247, 215, 230, 226, 148, 55,  204, 136, 59,  221, 121, 210, 19,  64,  200, 232, 214, 52,  104, 141,
        198, 222, 244, 239, 105, 236, 194, 127, 214, 206, 79,  39,  41,  242, 96,  74,  210, 81,  118, 54,  93,  130,
        80,  184, 83,  37,  212, 55,  4,   10,  233, 196, 253, 51,  34,  158, 65,  10,  162, 7,   239, 147, 115, 43,
        253, 35,  106, 183, 160, 83,  104, 63,  120, 78,  242, 0,   72,  91,  22,  48};

    std::vector<uint8_t> out(messageForCheck.size());

    CIPHER_HANDLE sha3 = PQC_context_init_hash(PQC_CIPHER_SHA3, PQC_SHAKE_256);
    EXPECT_EQ(PQC_hash_update(sha3, (uint8_t *)"1234567890", 10), PQC_OK);
    EXPECT_EQ(PQC_hash_retrieve(sha3, out.data(), out.size()), PQC_OK);

    EXPECT_EQ(out, messageForCheck);
}

TEST(SHA3, KNOWN_ANSWERS_SHA3)
{
    static const std::filesystem::path current(__FILE__);
    static const auto base_path = current.parent_path() / "sha3";

    const std::vector<std::string> files_to_test = {
        "SHA3_224ShortMsg.rsp", "SHA3_256ShortMsg.rsp", "SHA3_384ShortMsg.rsp", "SHA3_512ShortMsg.rsp",
        "SHA3_224LongMsg.rsp",  "SHA3_256LongMsg.rsp",  "SHA3_384LongMsg.rsp",  "SHA3_512LongMsg.rsp"};

    for (const auto & filename : files_to_test)
    {
        const auto responses_path = base_path / filename;

        std::ifstream file(responses_path, std::ios_base::in | std::ios_base::binary);
        ASSERT_TRUE(file.is_open()) << "Failed to open file: " << responses_path;

        auto [verifiedCount, totalCount] = verify_sha_3(responses_path.string());
        EXPECT_EQ(verifiedCount, totalCount) << "Verification failed for " << filename;
    }
}

TEST(SHA3, KNOWN_ANSWERS_SHAKE)
{
    static const std::filesystem::path current(__FILE__);
    static const auto base_path = current.parent_path() / "sha3";

    const std::vector<std::string> files_to_test = {
        "SHAKE128ShortMsg.rsp", "SHAKE256ShortMsg.rsp", "SHAKE128LongMsg.rsp", "SHAKE256LongMsg.rsp"};

    for (const auto & filename : files_to_test)
    {
        const auto responses_path = base_path / filename;
        auto [verified_count, total_count] = verify_shake(responses_path.string());
        EXPECT_EQ(verified_count, total_count) << "Verification failed for " << filename;
    }
}
