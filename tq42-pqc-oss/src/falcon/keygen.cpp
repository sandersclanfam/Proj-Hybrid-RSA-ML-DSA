#include "falcon.h"
#include "inner.h"

#define MKN(degIndex) ((size_t)1 << (degIndex))


typedef struct
{
    uint32_t p;
    uint32_t g;
    uint32_t s;
} small_prime;

static const small_prime PRIMES[] = {
    {2147473409, 383167813, 10239},       {2147389441, 211808905, 471403745},   {2147387393, 37672282, 1329335065},
    {2147377153, 1977035326, 968223422},  {2147358721, 1067163706, 132460015},  {2147352577, 1606082042, 598693809},
    {2147346433, 2033915641, 1056257184}, {2147338241, 1653770625, 421286710},  {2147309569, 631200819, 1111201074},
    {2147297281, 2038364663, 1042003613}, {2147295233, 1962540515, 19440033},   {2147239937, 2100082663, 353296760},
    {2147235841, 1991153006, 1703918027}, {2147217409, 516405114, 1258919613},  {2147205121, 409347988, 1089726929},
    {2147196929, 927788991, 1946238668},  {2147178497, 1136922411, 1347028164}, {2147100673, 868626236, 701164723},
    {2147082241, 1897279176, 617820870},  {2147074049, 1888819123, 158382189},  {2147051521, 25006327, 522758543},
    {2147043329, 327546255, 37227845},    {2147039233, 766324424, 1133356428},  {2146988033, 1862817362, 73861329},
    {2146963457, 404622040, 653019435},   {2146959361, 1936581214, 995143093},  {2146938881, 1559770096, 634921513},
    {2146908161, 422623708, 1985060172},  {2146885633, 1751189170, 298238186},  {2146871297, 578919515, 291810829},
    {2146846721, 1114060353, 915902322},  {2146834433, 2069565474, 47859524},   {2146818049, 1552824584, 646281055},
    {2146775041, 1906267847, 1597832891}, {2146756609, 1847414714, 1228090888}, {2146744321, 1818792070, 1176377637},
    {2146738177, 1118066398, 1054971214}, {2146736129, 52057278, 933422153},    {2146713601, 592259376, 1406621510},
    {2146695169, 263161877, 1514178701},  {2146656257, 685363115, 384505091},   {2146650113, 927727032, 537575289},
    {2146646017, 52575506, 1799464037},   {2146643969, 1276803876, 1348954416}, {2146603009, 814028633, 1521547704},
    {2146572289, 1846678872, 1310832121}, {2146547713, 919368090, 1019041349},  {2146508801, 671847612, 38582496},
    {2146492417, 283911680, 532424562},   {2146490369, 1780044827, 896447978},  {2146459649, 327980850, 1327906900},
    {2146447361, 1310561493, 958645253},  {2146441217, 412148926, 287271128},   {2146437121, 293186449, 2009822534},
    {2146430977, 179034356, 1359155584},  {2146418689, 1517345488, 1790248672}, {2146406401, 1615820390, 1584833571},
    {2146404353, 826651445, 607120498},   {2146379777, 3816988, 1897049071},    {2146363393, 1221409784, 1986921567},
    {2146355201, 1388081168, 849968120},  {2146336769, 1803473237, 1655544036}, {2146312193, 1023484977, 273671831},
    {2146293761, 1074591448, 467406983},  {2146283521, 831604668, 1523950494},  {2146203649, 712865423, 1170834574},
    {2146154497, 1764991362, 1064856763}, {2146142209, 627386213, 1406840151},  {2146127873, 1638674429, 2088393537},
    {2146099201, 1516001018, 690673370},  {2146093057, 1294931393, 315136610},  {2146091009, 1942399533, 973539425},
    {2146078721, 1843461814, 2132275436}, {2146060289, 1098740778, 360423481},  {2146048001, 1617213232, 1951981294},
    {2146041857, 1805783169, 2075683489}, {2146019329, 272027909, 1753219918},  {2145986561, 1206530344, 2034028118},
    {2145976321, 1243769360, 1173377644}, {2145964033, 887200839, 1281344586},  {2145906689, 1651026455, 906178216},
    {2145875969, 1673238256, 1043521212}, {2145871873, 1226591210, 1399796492}, {2145841153, 1465353397, 1324527802},
    {2145832961, 1150638905, 554084759},  {2145816577, 221601706, 427340863},   {2145785857, 608896761, 316590738},
    {2145755137, 1712054942, 1684294304}, {2145742849, 1302302867, 724873116},  {2145728513, 516717693, 431671476},
    {2145699841, 524575579, 1619722537},  {2145691649, 1925625239, 982974435},  {2145687553, 463795662, 1293154300},
    {2145673217, 771716636, 881778029},   {2145630209, 1509556977, 837364988},  {2145595393, 229091856, 851648427},
    {2145587201, 1796903241, 635342424},  {2145525761, 715310882, 1677228081},  {2145495041, 1040930522, 200685896},
    {2145466369, 949804237, 1809146322},  {2145445889, 1673903706, 95316881},   {2145390593, 806941852, 1428671135},
    {2145372161, 1402525292, 159350694},  {2145361921, 2124760298, 1589134749}, {2145359873, 1217503067, 1561543010},
    {2145355777, 338341402, 83865711},    {2145343489, 1381532164, 641430002},  {2145325057, 1883895478, 1528469895},
    {2145318913, 1335370424, 65809740},   {2145312769, 2000008042, 1919775760}, {2145300481, 961450962, 1229540578},
    {2145282049, 910466767, 1964062701},  {2145232897, 816527501, 450152063},   {2145218561, 1435128058, 1794509700},
    {2145187841, 33505311, 1272467582},   {2145181697, 269767433, 1380363849},  {2145175553, 56386299, 1316870546},
    {2145079297, 2106880293, 1391797340}, {2145021953, 1347906152, 720510798},  {2145015809, 206769262, 1651459955},
    {2145003521, 1885513236, 1393381284}, {2144960513, 1810381315, 31937275},   {2144944129, 1306487838, 2019419520},
    {2144935937, 37304730, 1841489054},   {2144894977, 1601434616, 157985831},  {2144888833, 98749330, 2128592228},
    {2144880641, 1772327002, 2076128344}, {2144864257, 1404514762, 2029969964}, {2144827393, 801236594, 406627220},
    {2144806913, 349217443, 1501080290},  {2144796673, 1542656776, 2084736519}, {2144778241, 1210734884, 1746416203},
    {2144759809, 1146598851, 716464489},  {2144757761, 286328400, 1823728177},  {2144729089, 1347555695, 1836644881},
    {2144727041, 1795703790, 520296412},  {2144696321, 1302475157, 852964281},  {2144667649, 1075877614, 504992927},
    {2144573441, 198765808, 1617144982},  {2144555009, 321528767, 155821259},   {2144550913, 814139516, 1819937644},
    {2144536577, 571143206, 962942255},   {2144524289, 1746733766, 2471321},    {2144512001, 1821415077, 124190939},
    {2144468993, 917871546, 1260072806},  {2144458753, 378417981, 1569240563},  {2144421889, 175229668, 1825620763},
    {2144409601, 1699216963, 351648117},  {2144370689, 1071885991, 958186029},  {2144348161, 1763151227, 540353574},
    {2144335873, 1060214804, 919598847},  {2144329729, 663515846, 1448552668},  {2144327681, 1057776305, 590222840},
    {2144309249, 1705149168, 1459294624}, {2144296961, 325823721, 1649016934},  {2144290817, 738775789, 447427206},
    {2144243713, 962347618, 893050215},   {2144237569, 1655257077, 900860862},  {2144161793, 242206694, 1567868672},
    {2144155649, 769415308, 1247993134},  {2144137217, 320492023, 515841070},   {2144120833, 1639388522, 770877302},
    {2144071681, 1761785233, 964296120},  {2144065537, 419817825, 204564472},   {2144028673, 666050597, 2091019760},
    {2144010241, 1413657615, 1518702610}, {2143952897, 1238327946, 475672271},  {2143940609, 307063413, 1176750846},
    {2143918081, 2062905559, 786785803},  {2143899649, 1338112849, 1562292083}, {2143891457, 68149545, 87166451},
    {2143885313, 921750778, 394460854},   {2143854593, 719766593, 133877196},   {2143836161, 1149399850, 1861591875},
    {2143762433, 1848739366, 1335934145}, {2143756289, 1326674710, 102999236},  {2143713281, 808061791, 1156900308},
    {2143690753, 388399459, 1926468019},  {2143670273, 1427891374, 1756689401}, {2143666177, 1912173949, 986629565},
    {2143645697, 2041160111, 371842865},  {2143641601, 1279906897, 2023974350}, {2143635457, 720473174, 1389027526},
    {2143621121, 1298309455, 1732632006}, {2143598593, 1548762216, 1825417506}, {2143567873, 620475784, 1073787233},
    {2143561729, 1932954575, 949167309},  {2143553537, 354315656, 1652037534},  {2143541249, 577424288, 1097027618},
    {2143531009, 357862822, 478640055},   {2143522817, 2017706025, 1550531668}, {2143506433, 2078127419, 1824320165},
    {2143488001, 613475285, 1604011510},  {2143469569, 1466594987, 502095196},  {2143426561, 1115430331, 1044637111},
    {2143383553, 9778045, 1902463734},    {2143377409, 1557401276, 2056861771}, {2143363073, 652036455, 1965915971},
    {2143260673, 1464581171, 1523257541}, {2143246337, 1876119649, 764541916},  {2143209473, 1614992673, 1920672844},
    {2143203329, 981052047, 2049774209},  {2143160321, 1847355533, 728535665},  {2143129601, 965558457, 603052992},
    {2143123457, 2140817191, 8348679},    {2143100929, 1547263683, 694209023},  {2143092737, 643459066, 1979934533},
    {2143082497, 188603778, 2026175670},  {2143062017, 1657329695, 377451099},  {2143051777, 114967950, 979255473},
    {2143025153, 1698431342, 1449196896}, {2143006721, 1862741675, 1739650365}, {2142996481, 756660457, 996160050},
    {2142976001, 927864010, 1166847574},  {2142965761, 905070557, 661974566},   {2142916609, 40932754, 1787161127},
    {2142892033, 1987985648, 675335382},  {2142885889, 797497211, 1323096997},  {2142871553, 2068025830, 1411877159},
    {2142861313, 1217177090, 1438410687}, {2142830593, 409906375, 1767860634},  {2142803969, 1197788993, 359782919},
    {2142785537, 643817365, 513932862},   {2142779393, 1717046338, 218943121},  {2142724097, 89336830, 416687049},
    {2142707713, 5944581, 1356813523},    {2142658561, 887942135, 2074011722},  {2142638081, 151851972, 1647339939},
    {2142564353, 1691505537, 1483107336}, {2142533633, 1989920200, 1135938817}, {2142529537, 959263126, 1531961857},
    {2142527489, 453251129, 1725566162},  {2142502913, 1536028102, 182053257},  {2142498817, 570138730, 701443447},
    {2142416897, 326965800, 411931819},   {2142363649, 1675665410, 1517191733}, {2142351361, 968529566, 1575712703},
    {2142330881, 1384953238, 1769087884}, {2142314497, 1977173242, 1833745524}, {2142289921, 95082313, 1714775493},
    {2142283777, 109377615, 1070584533},  {2142277633, 16960510, 702157145},    {2142263297, 553850819, 431364395},
    {2142208001, 241466367, 2053967982},  {2142164993, 1795661326, 1031836848}, {2142097409, 1212530046, 712772031},
    {2142087169, 1763869720, 822276067},  {2142078977, 644065713, 1765268066},  {2142074881, 112671944, 643204925},
    {2142044161, 1387785471, 1297890174}, {2142025729, 783885537, 1000425730},  {2142011393, 905662232, 1679401033},
    {2141974529, 799788433, 468119557},   {2141943809, 1932544124, 449305555},  {2141933569, 1527403256, 841867925},
    {2141931521, 1247076451, 743823916},  {2141902849, 1199660531, 401687910},  {2141890561, 150132350, 1720336972},
    {2141857793, 1287438162, 663880489},  {2141833217, 618017731, 1819208266},  {2141820929, 999578638, 1403090096},
    {2141786113, 81834325, 1523542501},   {2141771777, 120001928, 463556492},   {2141759489, 122455485, 2124928282},
    {2141749249, 141986041, 940339153},   {2141685761, 889088734, 477141499},   {2141673473, 324212681, 1122558298},
    {2141669377, 1175806187, 1373818177}, {2141655041, 1113654822, 296887082},  {2141587457, 991103258, 1585913875},
    {2141583361, 1401451409, 1802457360}, {2141575169, 1571977166, 712760980},  {2141546497, 1107849376, 1250270109},
    {2141515777, 196544219, 356001130},   {2141495297, 1733571506, 1060744866}, {2141483009, 321552363, 1168297026},
    {2141458433, 505818251, 733225819},   {2141360129, 1026840098, 948342276},  {2141325313, 945133744, 2129965998},
    {2141317121, 1871100260, 1843844634}, {2141286401, 1790639498, 1750465696}, {2141267969, 1376858592, 186160720},
    {2141255681, 2129698296, 1876677959}, {2141243393, 2138900688, 1340009628}, {2141214721, 1933049835, 1087819477},
    {2141212673, 1898664939, 1786328049}, {2141202433, 990234828, 940682169},   {2141175809, 1406392421, 993089586},
    {2141165569, 1263518371, 289019479},  {2141073409, 1485624211, 507864514},  {2141052929, 1885134788, 311252465},
    {2141040641, 1285021247, 280941862},  {2141028353, 1527610374, 375035110},  {2141011969, 1400626168, 164696620},
    {2140999681, 632959608, 966175067},   {2140997633, 2045628978, 1290889438}, {2140993537, 1412755491, 375366253},
    {2140942337, 719477232, 785367828},   {2140925953, 45224252, 836552317},    {2140917761, 1157376588, 1001839569},
    {2140887041, 278480752, 2098732796},  {2140837889, 1663139953, 924094810},  {2140788737, 802501511, 2045368990},
    {2140766209, 1820083885, 1800295504}, {2140764161, 1169561905, 2106792035}, {2140696577, 127781498, 1885987531},
    {2140684289, 16014477, 1098116827},   {2140653569, 665960598, 1796728247},  {2140594177, 1043085491, 377310938},
    {2140579841, 1732838211, 1504505945}, {2140569601, 302071939, 358291016},   {2140567553, 192393733, 1909137143},
    {2140557313, 406595731, 1175330270},  {2140549121, 1748850918, 525007007},  {2140477441, 499436566, 1031159814},
    {2140469249, 1886004401, 1029951320}, {2140426241, 1483168100, 1676273461}, {2140420097, 1779917297, 846024476},
    {2140413953, 522948893, 1816354149},  {2140383233, 1931364473, 1296921241}, {2140366849, 1917356555, 147196204},
    {2140354561, 16466177, 1349052107},   {2140348417, 1875366972, 1860485634}, {2140323841, 456498717, 1790256483},
    {2140321793, 1629493973, 150031888},  {2140315649, 1904063898, 395510935},  {2140280833, 1784104328, 831417909},
    {2140250113, 256087139, 697349101},   {2140229633, 388553070, 243875754},   {2140223489, 747459608, 1396270850},
    {2140200961, 507423743, 1895572209},  {2140162049, 580106016, 2045297469},  {2140149761, 712426444, 785217995},
    {2140137473, 1441607584, 536866543},  {2140119041, 346538902, 1740434653},  {2140090369, 282642885, 21051094},
    {2140076033, 1407456228, 319910029},  {2140047361, 1619330500, 1488632070}, {2140041217, 2089408064, 2012026134},
    {2140008449, 1705524800, 1613440760}, {2139924481, 1846208233, 1280649481}, {2139906049, 989438755, 1185646076},
    {2139867137, 1522314850, 372783595},  {2139842561, 1681587377, 216848235},  {2139826177, 2066284988, 1784999464},
    {2139824129, 480888214, 1513323027},  {2139789313, 847937200, 858192859},   {2139783169, 1642000434, 1583261448},
    {2139770881, 940699589, 179702100},   {2139768833, 315623242, 964612676},   {2139666433, 331649203, 764666914},
    {2139641857, 2118730799, 1313764644}, {2139635713, 519149027, 519212449},   {2139598849, 1526413634, 1769667104},
    {2139574273, 551148610, 820739925},   {2139568129, 1386800242, 472447405},  {2139549697, 813760130, 1412328531},
    {2139537409, 1615286260, 1609362979}, {2139475969, 1352559299, 1696720421}, {2139455489, 1048691649, 1584935400},
    {2139432961, 836025845, 950121150},   {2139424769, 1558281165, 1635486858}, {2139406337, 1728402143, 1674423301},
    {2139396097, 1727715782, 1483470544}, {2139383809, 1092853491, 1741699084}, {2139369473, 690776899, 1242798709},
    {2139351041, 1768782380, 2120712049}, {2139334657, 1739968247, 1427249225}, {2139332609, 1547189119, 623011170},
    {2139310081, 1346827917, 1605466350}, {2139303937, 369317948, 828392831},   {2139301889, 1560417239, 1788073219},
    {2139283457, 1303121623, 595079358},  {2139248641, 1354555286, 573424177},  {2139240449, 60974056, 885781403},
    {2139222017, 355573421, 1221054839},  {2139215873, 566477826, 1724006500},  {2139150337, 871437673, 1609133294},
    {2139144193, 1478130914, 1137491905}, {2139117569, 1854880922, 964728507},  {2139076609, 202405335, 756508944},
    {2139062273, 1399715741, 884826059},  {2139045889, 1051045798, 1202295476}, {2139033601, 1707715206, 632234634},
    {2139006977, 2035853139, 231626690},  {2138951681, 183867876, 838350879},   {2138945537, 1403254661, 404460202},
    {2138920961, 310865011, 1282911681},  {2138910721, 1328496553, 103472415},  {2138904577, 78831681, 993513549},
    {2138902529, 1319697451, 1055904361}, {2138816513, 384338872, 1706202469},  {2138810369, 1084868275, 405677177},
    {2138787841, 401181788, 1964773901},  {2138775553, 1850532988, 1247087473}, {2138767361, 874261901, 1576073565},
    {2138757121, 1187474742, 993541415},  {2138748929, 1782458888, 1043206483}, {2138744833, 1221500487, 800141243},
    {2138738689, 413465368, 1450660558},  {2138695681, 739045140, 342611472},   {2138658817, 1355845756, 672674190},
    {2138644481, 608379162, 1538874380},  {2138632193, 1444914034, 686911254},  {2138607617, 484707818, 1435142134},
    {2138591233, 539460669, 1290458549},  {2138572801, 2093538990, 2011138646}, {2138552321, 1149786988, 1076414907},
    {2138546177, 840688206, 2108985273},  {2138533889, 209669619, 198172413},   {2138523649, 1975879426, 1277003968},
    {2138490881, 1351891144, 1976858109}, {2138460161, 1817321013, 1979278293}, {2138429441, 1950077177, 203441928},
    {2138400769, 908970113, 628395069},   {2138398721, 219890864, 758486760},   {2138376193, 1306654379, 977554090},
    {2138351617, 298822498, 2004708503},  {2138337281, 441457816, 1049002108},  {2138320897, 1517731724, 1442269609},
    {2138290177, 1355911197, 1647139103}, {2138234881, 531313247, 1746591962},  {2138214401, 1899410930, 781416444},
    {2138202113, 1813477173, 1622508515}, {2138191873, 1086458299, 1025408615}, {2138183681, 1998800427, 827063290},
    {2138173441, 1921308898, 749670117},  {2138103809, 1620902804, 2126787647}, {2138099713, 828647069, 1892961817},
    {2138085377, 179405355, 1525506535},  {2138060801, 615683235, 1259580138},  {2138044417, 2030277840, 1731266562},
    {2138042369, 2087222316, 1627902259}, {2138032129, 126388712, 1108640984},  {2138011649, 715026550, 1017980050},
    {2137993217, 1693714349, 1351778704}, {2137888769, 1289762259, 1053090405}, {2137853953, 199991890, 1254192789},
    {2137833473, 941421685, 896995556},   {2137817089, 750416446, 1251031181},  {2137792513, 798075119, 368077456},
    {2137786369, 878543495, 1035375025},  {2137767937, 9351178, 1156563902},    {2137755649, 1382297614, 1686559583},
    {2137724929, 1345472850, 1681096331}, {2137704449, 834666929, 630551727},   {2137673729, 1646165729, 1892091571},
    {2137620481, 778943821, 48456461},    {2137618433, 1730837875, 1713336725}, {2137581569, 805610339, 1378891359},
    {2137538561, 204342388, 1950165220},  {2137526273, 1947629754, 1500789441}, {2137516033, 719902645, 1499525372},
    {2137491457, 230451261, 556382829},   {2137440257, 979573541, 412760291},   {2137374721, 927841248, 1954137185},
    {2137362433, 1243778559, 861024672},  {2137313281, 1341338501, 980638386},  {2137311233, 937415182, 1793212117},
    {2137255937, 795331324, 1410253405},  {2137243649, 150756339, 1966999887},  {2137182209, 163346914, 1939301431},
    {2137171969, 1952552395, 758913141},  {2137159681, 570788721, 218668666},   {2137147393, 1896656810, 2045670345},
    {2137141249, 358493842, 518199643},   {2137139201, 1505023029, 674695848},  {2137133057, 27911103, 830956306},
    {2137122817, 439771337, 1555268614},  {2137116673, 790988579, 1871449599},  {2137110529, 432109234, 811805080},
    {2137102337, 1357900653, 1184997641}, {2137098241, 515119035, 1715693095},  {2137090049, 408575203, 2085660657},
    {2137085953, 2097793407, 1349626963}, {2137055233, 1556739954, 1449960883}, {2137030657, 1545758650, 1369303716},
    {2136987649, 332602570, 103875114},   {2136969217, 1499989506, 1662964115}, {2136924161, 857040753, 4738842},
    {2136895489, 1948872712, 570436091},  {2136893441, 58969960, 1568349634},   {2136887297, 2127193379, 273612548},
    {2136850433, 111208983, 1181257116},  {2136809473, 1627275942, 1680317971}, {2136764417, 1574888217, 14011331},
    {2136741889, 14011055, 1129154251},   {2136727553, 35862563, 1838555253},   {2136721409, 310235666, 1363928244},
    {2136698881, 1612429202, 1560383828}, {2136649729, 1138540131, 800014364},  {2136606721, 602323503, 1433096652},
    {2136563713, 182209265, 1919611038},  {2136555521, 324156477, 165591039},   {2136549377, 195513113, 217165345},
    {2136526849, 1050768046, 939647887},  {2136508417, 1886286237, 1619926572}, {2136477697, 609647664, 35065157},
    {2136471553, 679352216, 1452259468},  {2136457217, 128630031, 824816521},   {2136422401, 19787464, 1526049830},
    {2136420353, 698316836, 1530623527},  {2136371201, 1651862373, 1804812805}, {2136334337, 326596005, 336977082},
    {2136322049, 63253370, 1904972151},   {2136297473, 312176076, 172182411},   {2136248321, 381261841, 369032670},
    {2136242177, 358688773, 1640007994},  {2136229889, 512677188, 75585225},    {2136219649, 2095003250, 1970086149},
    {2136207361, 1909650722, 537760675},  {2136176641, 1334616195, 1533487619}, {2136158209, 2096285632, 1793285210},
    {2136143873, 1897347517, 293843959},  {2136133633, 923586222, 1022655978},  {2136096769, 1464868191, 1515074410},
    {2136094721, 2020679520, 2061636104}, {2136076289, 290798503, 1814726809},  {2136041473, 156415894, 1250757633},
    {2135996417, 297459940, 1132158924},  {2135955457, 538755304, 1688831340},  {0, 0, 0}};


static inline uint32_t modp_set(int32_t a, uint32_t b)
{
    uint32_t rez;

    rez = (uint32_t)a;
    rez += b & -(rez >> 31);
    return rez;
}

static inline int32_t modp_norm(uint32_t a, uint32_t b)
{
    return (int32_t)(a - (b & (((a - ((b + 1) >> 1)) >> 31) - 1)));
}

static uint32_t modp_ninv_31(uint32_t a)
{
    uint32_t b;

    b = 2 - a;
    b *= 2 - a * b;
    b *= 2 - a * b;
    b *= 2 - a * b;
    b *= 2 - a * b;
    return (uint32_t)0x7FFFFFFF & -b;
}

static inline uint32_t modp_r(uint32_t a) { return ((uint32_t)1 << 31) - a; }

static inline uint32_t modp_add(uint32_t a, uint32_t b, uint32_t c)
{
    uint32_t rez;

    rez = a + b - c;
    rez += c & -(rez >> 31);
    return rez;
}

static inline uint32_t modp_sub(uint32_t a, uint32_t b, uint32_t c)
{
    uint32_t rez;

    rez = a - b;
    rez += c & -(rez >> 31);

    return rez;
}

static inline uint32_t modp_montymul(uint32_t a, uint32_t b, uint32_t c, uint32_t c0)
{

    uint64_t k, l;
    uint32_t rez;

    k = (uint64_t)a * (uint64_t)b;
    l = ((k * c0) & (uint64_t)0x7FFFFFFF) * c;
    rez = (uint32_t)((k + l) >> 31) - c;
    rez += c & -(rez >> 31);
    return rez;
}

static uint32_t modp_r_2(uint32_t a, uint32_t c0)
{
    uint32_t rez;

    rez = modp_r(a);
    rez = modp_add(rez, rez, a);

    rez = modp_montymul(rez, rez, a, c0);
    rez = modp_montymul(rez, rez, a, c0);
    rez = modp_montymul(rez, rez, a, c0);
    rez = modp_montymul(rez, rez, a, c0);
    rez = modp_montymul(rez, rez, a, c0);

    rez = (rez + (a & -(rez & 1))) >> 1;
    return rez;
}

static inline uint32_t modp_rx(unsigned b, uint32_t a, uint32_t c0, uint32_t R2)
{
    uint32_t d, rez;

    b--;
    d = R2;
    rez = modp_r(a);
    for (int i = 0; (1U << i) <= b; i++)
    {
        if ((b & (1U << i)) != 0)
        {
            rez = modp_montymul(rez, d, a, c0);
        }
        d = modp_montymul(d, d, a, c0);
    }
    return rez;
}

static uint32_t modp_div(uint32_t a, uint32_t b, uint32_t c, uint32_t c0, uint32_t d)
{
    uint32_t k, e;

    e = c - 2;
    k = d;
    for (int i = 30; i >= 0; i--)
    {
        uint32_t k2;

        k = modp_montymul(k, k, c, c0);
        k2 = modp_montymul(k, b, c, c0);
        k ^= (k ^ k2) & -(uint32_t)((e >> i) & 1);
    }

    k = modp_montymul(k, 1, c, c0);
    return modp_montymul(a, k, c, c0);
}

static const uint16_t REV10[] = {
    0,   512, 256, 768,  128, 640, 384, 896,  64,  576, 320, 832,  192, 704, 448, 960,  32,  544, 288, 800,
    160, 672, 416, 928,  96,  608, 352, 864,  224, 736, 480, 992,  16,  528, 272, 784,  144, 656, 400, 912,
    80,  592, 336, 848,  208, 720, 464, 976,  48,  560, 304, 816,  176, 688, 432, 944,  112, 624, 368, 880,
    240, 752, 496, 1008, 8,   520, 264, 776,  136, 648, 392, 904,  72,  584, 328, 840,  200, 712, 456, 968,
    40,  552, 296, 808,  168, 680, 424, 936,  104, 616, 360, 872,  232, 744, 488, 1000, 24,  536, 280, 792,
    152, 664, 408, 920,  88,  600, 344, 856,  216, 728, 472, 984,  56,  568, 312, 824,  184, 696, 440, 952,
    120, 632, 376, 888,  248, 760, 504, 1016, 4,   516, 260, 772,  132, 644, 388, 900,  68,  580, 324, 836,
    196, 708, 452, 964,  36,  548, 292, 804,  164, 676, 420, 932,  100, 612, 356, 868,  228, 740, 484, 996,
    20,  532, 276, 788,  148, 660, 404, 916,  84,  596, 340, 852,  212, 724, 468, 980,  52,  564, 308, 820,
    180, 692, 436, 948,  116, 628, 372, 884,  244, 756, 500, 1012, 12,  524, 268, 780,  140, 652, 396, 908,
    76,  588, 332, 844,  204, 716, 460, 972,  44,  556, 300, 812,  172, 684, 428, 940,  108, 620, 364, 876,
    236, 748, 492, 1004, 28,  540, 284, 796,  156, 668, 412, 924,  92,  604, 348, 860,  220, 732, 476, 988,
    60,  572, 316, 828,  188, 700, 444, 956,  124, 636, 380, 892,  252, 764, 508, 1020, 2,   514, 258, 770,
    130, 642, 386, 898,  66,  578, 322, 834,  194, 706, 450, 962,  34,  546, 290, 802,  162, 674, 418, 930,
    98,  610, 354, 866,  226, 738, 482, 994,  18,  530, 274, 786,  146, 658, 402, 914,  82,  594, 338, 850,
    210, 722, 466, 978,  50,  562, 306, 818,  178, 690, 434, 946,  114, 626, 370, 882,  242, 754, 498, 1010,
    10,  522, 266, 778,  138, 650, 394, 906,  74,  586, 330, 842,  202, 714, 458, 970,  42,  554, 298, 810,
    170, 682, 426, 938,  106, 618, 362, 874,  234, 746, 490, 1002, 26,  538, 282, 794,  154, 666, 410, 922,
    90,  602, 346, 858,  218, 730, 474, 986,  58,  570, 314, 826,  186, 698, 442, 954,  122, 634, 378, 890,
    250, 762, 506, 1018, 6,   518, 262, 774,  134, 646, 390, 902,  70,  582, 326, 838,  198, 710, 454, 966,
    38,  550, 294, 806,  166, 678, 422, 934,  102, 614, 358, 870,  230, 742, 486, 998,  22,  534, 278, 790,
    150, 662, 406, 918,  86,  598, 342, 854,  214, 726, 470, 982,  54,  566, 310, 822,  182, 694, 438, 950,
    118, 630, 374, 886,  246, 758, 502, 1014, 14,  526, 270, 782,  142, 654, 398, 910,  78,  590, 334, 846,
    206, 718, 462, 974,  46,  558, 302, 814,  174, 686, 430, 942,  110, 622, 366, 878,  238, 750, 494, 1006,
    30,  542, 286, 798,  158, 670, 414, 926,  94,  606, 350, 862,  222, 734, 478, 990,  62,  574, 318, 830,
    190, 702, 446, 958,  126, 638, 382, 894,  254, 766, 510, 1022, 1,   513, 257, 769,  129, 641, 385, 897,
    65,  577, 321, 833,  193, 705, 449, 961,  33,  545, 289, 801,  161, 673, 417, 929,  97,  609, 353, 865,
    225, 737, 481, 993,  17,  529, 273, 785,  145, 657, 401, 913,  81,  593, 337, 849,  209, 721, 465, 977,
    49,  561, 305, 817,  177, 689, 433, 945,  113, 625, 369, 881,  241, 753, 497, 1009, 9,   521, 265, 777,
    137, 649, 393, 905,  73,  585, 329, 841,  201, 713, 457, 969,  41,  553, 297, 809,  169, 681, 425, 937,
    105, 617, 361, 873,  233, 745, 489, 1001, 25,  537, 281, 793,  153, 665, 409, 921,  89,  601, 345, 857,
    217, 729, 473, 985,  57,  569, 313, 825,  185, 697, 441, 953,  121, 633, 377, 889,  249, 761, 505, 1017,
    5,   517, 261, 773,  133, 645, 389, 901,  69,  581, 325, 837,  197, 709, 453, 965,  37,  549, 293, 805,
    165, 677, 421, 933,  101, 613, 357, 869,  229, 741, 485, 997,  21,  533, 277, 789,  149, 661, 405, 917,
    85,  597, 341, 853,  213, 725, 469, 981,  53,  565, 309, 821,  181, 693, 437, 949,  117, 629, 373, 885,
    245, 757, 501, 1013, 13,  525, 269, 781,  141, 653, 397, 909,  77,  589, 333, 845,  205, 717, 461, 973,
    45,  557, 301, 813,  173, 685, 429, 941,  109, 621, 365, 877,  237, 749, 493, 1005, 29,  541, 285, 797,
    157, 669, 413, 925,  93,  605, 349, 861,  221, 733, 477, 989,  61,  573, 317, 829,  189, 701, 445, 957,
    125, 637, 381, 893,  253, 765, 509, 1021, 3,   515, 259, 771,  131, 643, 387, 899,  67,  579, 323, 835,
    195, 707, 451, 963,  35,  547, 291, 803,  163, 675, 419, 931,  99,  611, 355, 867,  227, 739, 483, 995,
    19,  531, 275, 787,  147, 659, 403, 915,  83,  595, 339, 851,  211, 723, 467, 979,  51,  563, 307, 819,
    179, 691, 435, 947,  115, 627, 371, 883,  243, 755, 499, 1011, 11,  523, 267, 779,  139, 651, 395, 907,
    75,  587, 331, 843,  203, 715, 459, 971,  43,  555, 299, 811,  171, 683, 427, 939,  107, 619, 363, 875,
    235, 747, 491, 1003, 27,  539, 283, 795,  155, 667, 411, 923,  91,  603, 347, 859,  219, 731, 475, 987,
    59,  571, 315, 827,  187, 699, 443, 955,  123, 635, 379, 891,  251, 763, 507, 1019, 7,   519, 263, 775,
    135, 647, 391, 903,  71,  583, 327, 839,  199, 711, 455, 967,  39,  551, 295, 807,  167, 679, 423, 935,
    103, 615, 359, 871,  231, 743, 487, 999,  23,  535, 279, 791,  151, 663, 407, 919,  87,  599, 343, 855,
    215, 727, 471, 983,  55,  567, 311, 823,  183, 695, 439, 951,  119, 631, 375, 887,  247, 759, 503, 1015,
    15,  527, 271, 783,  143, 655, 399, 911,  79,  591, 335, 847,  207, 719, 463, 975,  47,  559, 303, 815,
    175, 687, 431, 943,  111, 623, 367, 879,  239, 751, 495, 1007, 31,  543, 287, 799,  159, 671, 415, 927,
    95,  607, 351, 863,  223, 735, 479, 991,  63,  575, 319, 831,  191, 703, 447, 959,  127, 639, 383, 895,
    255, 767, 511, 1023};

static void modp_mkgm_2(uint32_t * a, uint32_t * b, unsigned degIndex, uint32_t c, uint32_t d, uint32_t c0)
{
    size_t counter, elemNum;
    unsigned k;
    uint32_t e, c1, c2, s;

    elemNum = (size_t)1 << degIndex;

    s = modp_r_2(d, c0);
    c = modp_montymul(c, s, d, c0);
    for (k = degIndex; k < 10; k++)
    {
        c = modp_montymul(c, c, d, c0);
    }

    e = modp_div(s, c, d, c0, modp_r(d));
    k = 10 - degIndex;
    c1 = c2 = modp_r(d);
    for (counter = 0; counter < elemNum; counter++)
    {
        size_t v;

        v = REV10[counter << k];
        a[v] = c1;
        b[v] = c2;
        c1 = modp_montymul(c1, c, d, c0);
        c2 = modp_montymul(c2, e, d, c0);
    }
}

static void modp_ntt_2_ext(uint32_t * a, size_t strd, const uint32_t * b, unsigned degIndex, uint32_t c, uint32_t c0)
{
    size_t k, l, elemNum;

    if (degIndex == 0)
    {
        return;
    }
    elemNum = (size_t)1 << degIndex;
    k = elemNum;
    for (l = 1; l < elemNum; l <<= 1)
    {
        size_t g, u, h;

        g = k >> 1;
        for (u = 0, h = 0; u < l; u++, h += k)
        {
            uint32_t s;
            size_t v;
            uint32_t *f1, *f2;

            s = b[l + u];
            f1 = a + h * strd;
            f2 = f1 + g * strd;
            for (v = 0; v < g; v++, f1 += strd, f2 += strd)
            {
                uint32_t x, y;

                x = *f1;
                y = modp_montymul(*f2, s, c, c0);
                *f1 = modp_add(x, y, c);
                *f2 = modp_sub(x, y, c);
            }
        }
        k = g;
    }
}

static void modp_i_ntt_2_ext(uint32_t * a, size_t strd, const uint32_t * b, unsigned degIndex, uint32_t c, uint32_t c0)
{
    size_t d, l, n, k;
    uint32_t g;
    uint32_t * m;

    if (degIndex == 0)
    {
        return;
    }
    n = (size_t)1 << degIndex;
    d = 1;
    for (l = n; l > 1; l >>= 1)
    {
        size_t f, e, u, q;

        f = l >> 1;
        e = d << 1;
        for (u = 0, q = 0; u < f; u++, q += e)
        {
            uint32_t s;
            size_t v;
            uint32_t *f1, *f2;

            s = b[f + u];
            f1 = a + q * strd;
            f2 = f1 + d * strd;
            for (v = 0; v < d; v++, f1 += strd, f2 += strd)
            {
                uint32_t x, y;

                x = *f1;
                y = *f2;
                *f1 = modp_add(x, y, c);
                *f2 = modp_montymul(modp_sub(x, y, c), s, c, c0);
                ;
            }
        }
        d = e;
    }

    g = (uint32_t)1 << (31 - degIndex);
    for (k = 0, m = a; k < n; k++, m += strd)
    {
        *m = modp_montymul(*m, g, c, c0);
    }
}

#define modp_NTT2(a, b, degIndex, d, c0) modp_ntt_2_ext(a, 1, b, degIndex, d, c0)
#define modp_iNTT2(a, b, degIndex, d, c0) modp_i_ntt_2_ext(a, 1, b, degIndex, d, c0)

static void modp_poly_rec_res(uint32_t * f, unsigned degIndex, uint32_t c, uint32_t c0, uint32_t d)
{
    size_t g, counter;

    g = (size_t)1 << (degIndex - 1);
    for (counter = 0; counter < g; counter++)
    {
        uint32_t b0, b1;

        b0 = f[(counter << 1) + 0];
        b1 = f[(counter << 1) + 1];
        f[counter] = modp_montymul(modp_montymul(b0, b1, c, c0), d, c, c0);
    }
}

static uint32_t zint_sub(uint32_t * a, const uint32_t * b, size_t size, uint32_t c)
{
    size_t counter;
    uint32_t d, m;

    d = 0;
    m = -c;
    for (counter = 0; counter < size; counter++)
    {
        uint32_t t, w;

        t = a[counter];
        w = t - b[counter] - d;
        d = w >> 31;
        t ^= ((w & 0x7FFFFFFF) ^ t) & m;
        a[counter] = t;
    }
    return d;
}

static uint32_t zint_mul_small(uint32_t * m, size_t msize, uint32_t a)
{
    size_t counter;
    uint32_t d;

    d = 0;
    for (counter = 0; counter < msize; counter++)
    {
        uint64_t k;

        k = (uint64_t)m[counter] * (uint64_t)a + d;
        m[counter] = (uint32_t)k & 0x7FFFFFFF;
        d = (uint32_t)(k >> 31);
    }
    return d;
}

static uint32_t zint_mod_small_unsigned(const uint32_t * a, size_t aSize, uint32_t b, uint32_t c0, uint32_t c)
{
    uint32_t rez;
    size_t counter;

    rez = 0;
    counter = aSize;
    while (counter-- > 0)
    {
        uint32_t k;

        rez = modp_montymul(rez, c, b, c0);
        k = a[counter] - b;
        k += b & -(k >> 31);
        rez = modp_add(rez, k, b);
    }
    return rez;
}

static uint32_t zint_mod_small_signed(const uint32_t * a, size_t aSize, uint32_t b, uint32_t c0, uint32_t d, uint32_t e)
{
    uint32_t rez;

    if (aSize == 0)
    {
        return 0;
    }
    rez = zint_mod_small_unsigned(a, aSize, b, c0, d);
    rez = modp_sub(rez, e & -(a[aSize - 1] >> 30), b);
    return rez;
}


static void zint_add_mul_small(uint32_t * a, const uint32_t * b, size_t size, uint32_t c)
{
    size_t counter;
    uint32_t d;

    d = 0;
    for (counter = 0; counter < size; counter++)
    {
        uint32_t e, f;
        uint64_t k;

        e = a[counter];
        f = b[counter];
        k = (uint64_t)f * (uint64_t)c + (uint64_t)e + (uint64_t)d;
        a[counter] = (uint32_t)k & 0x7FFFFFFF;
        d = (uint32_t)(k >> 31);
    }
    a[size] = d;
}

static void zint_norm_zero(uint32_t * a, const uint32_t * b, size_t size)
{
    size_t c;
    uint32_t d, e;

    d = 0;
    e = 0;
    c = size;
    while (c-- > 0)
    {
        uint32_t f, g, l;

        f = a[c];
        g = (b[c] >> 1) | (e << 30);
        e = b[c] & 1;

        l = g - f;
        l = ((-l) >> 31) | -(l >> 31);

        d |= l & ((d & 1) - 1);
    }

    zint_sub(a, b, size, d >> 31);
}

static void zint_rebuild_crt(
    uint32_t * a, size_t xsize, size_t xstrd, size_t n, const small_prime * primes, int signedNorm, uint32_t * temp
)
{
    size_t counter;
    uint32_t * x;

    temp[0] = primes[0].p;
    for (counter = 1; counter < xsize; counter++)
    {

        uint32_t p, c0, s, k;
        size_t l;

        p = primes[counter].p;
        s = primes[counter].s;
        c0 = modp_ninv_31(p);
        k = modp_r_2(p, c0);

        for (l = 0, x = a; l < n; l++, x += xstrd)
        {
            uint32_t xp, xq, xr;

            xp = x[counter];
            xq = zint_mod_small_unsigned(x, counter, p, c0, k);


            xr = modp_montymul(s, modp_sub(xp, xq, p), p, c0);
            zint_add_mul_small(x, temp, counter, xr);
        }


        temp[counter] = zint_mul_small(temp, counter, p);
    }

    if (signedNorm)
    {
        for (counter = 0, x = a; counter < n; counter++, x += xstrd)
        {
            zint_norm_zero(x, temp, xsize);
        }
    }
}

static void zint_negate(uint32_t * a, size_t size, uint32_t b)
{
    size_t counter;
    uint32_t c, d;

    c = b;
    d = -b >> 1;
    for (counter = 0; counter < size; counter++)
    {
        uint32_t k;

        k = a[counter];
        k = (k ^ d) + c;
        a[counter] = k & 0x7FFFFFFF;
        c = k >> 31;
    }
}

static uint32_t zint_co_reduce(uint32_t * a, uint32_t * b, size_t size, int64_t c, int64_t d, int64_t e, int64_t g)
{
    size_t counter;
    int64_t k, l;
    uint32_t nega, negb;

    k = 0;
    l = 0;
    for (counter = 0; counter < size; counter++)
    {
        uint32_t f, m;
        uint64_t n, t;

        f = a[counter];
        m = b[counter];
        n = f * (uint64_t)c + m * (uint64_t)d + (uint64_t)k;
        t = f * (uint64_t)e + m * (uint64_t)g + (uint64_t)l;
        if (counter > 0)
        {
            a[counter - 1] = (uint32_t)n & 0x7FFFFFFF;
            b[counter - 1] = (uint32_t)t & 0x7FFFFFFF;
        }
        k = *(int64_t *)&n >> 31;
        l = *(int64_t *)&t >> 31;
    }
    a[size - 1] = (uint32_t)k;
    b[size - 1] = (uint32_t)l;

    nega = (uint32_t)((uint64_t)k >> 63);
    negb = (uint32_t)((uint64_t)l >> 63);
    zint_negate(a, size, nega);
    zint_negate(b, size, negb);
    return nega | (negb << 1);
}

static void zint_finish_mod(uint32_t * a, size_t size, const uint32_t * b, uint32_t ng)
{
    size_t counter;
    uint32_t c, d, g;

    c = 0;
    for (counter = 0; counter < size; counter++)
    {
        c = (a[counter] - b[counter] - c) >> 31;
    }

    d = -ng >> 1;
    g = -(ng | (1 - c));
    c = ng;
    for (counter = 0; counter < size; counter++)
    {
        uint32_t l, m;

        l = a[counter];
        m = (b[counter] ^ d) & g;
        l = l - m - c;
        a[counter] = l & 0x7FFFFFFF;
        c = l >> 31;
    }
}


static void zint_co_reduce_mod(
    uint32_t * a, uint32_t * b, const uint32_t * m, size_t size, uint32_t c, int64_t a1, int64_t b1, int64_t a2,
    int64_t b2
)
{
    size_t counter;
    int64_t l, k;
    uint32_t h, g;

    l = 0;
    k = 0;
    h = ((a[0] * (uint32_t)a1 + b[0] * (uint32_t)b1) * c) & 0x7FFFFFFF;
    g = ((a[0] * (uint32_t)a2 + b[0] * (uint32_t)b2) * c) & 0x7FFFFFFF;
    for (counter = 0; counter < size; counter++)
    {
        uint32_t d, e;
        uint64_t p, q;

        d = a[counter];
        e = b[counter];
        p = d * (uint64_t)a1 + e * (uint64_t)b1 + m[counter] * (uint64_t)h + (uint64_t)l;
        q = d * (uint64_t)a2 + e * (uint64_t)b2 + m[counter] * (uint64_t)g + (uint64_t)k;
        if (counter > 0)
        {
            a[counter - 1] = (uint32_t)p & 0x7FFFFFFF;
            b[counter - 1] = (uint32_t)q & 0x7FFFFFFF;
        }
        l = *(int64_t *)&p >> 31;
        k = *(int64_t *)&q >> 31;
    }
    a[size - 1] = (uint32_t)l;
    b[size - 1] = (uint32_t)k;

    zint_finish_mod(a, size, m, (uint32_t)((uint64_t)l >> 63));
    zint_finish_mod(b, size, m, (uint32_t)((uint64_t)k >> 63));
}

static int zint_bezout(uint32_t * a, uint32_t * b, const uint32_t * c, const uint32_t * d, size_t size, uint32_t * temp)
{

    uint32_t *a00, *a11, *b00, *b11, *a2, *b2;
    uint32_t h, d0;
    uint32_t counter, k;
    size_t j;

    if (size == 0)
    {
        return 0;
    }


    a00 = a;
    b00 = b;
    a11 = temp;
    b11 = a11 + size;
    a2 = b11 + size;
    b2 = a2 + size;

    h = modp_ninv_31(c[0]);
    d0 = modp_ninv_31(d[0]);

    memcpy(a2, c, size * sizeof *c);
    memcpy(b2, d, size * sizeof *d);
    a00[0] = 1;
    memset(a00 + 1, 0, (size - 1) * sizeof *a00);
    memset(b00, 0, size * sizeof *b00);
    memcpy(a11, d, size * sizeof *a11);
    memcpy(b11, c, size * sizeof *b11);
    b11[0]--;

    for (counter = 62 * (uint32_t)size + 30; counter >= 30; counter -= 30)
    {
        uint32_t c0, c1;
        uint32_t a0, a1, b0, b1;
        uint64_t aHi, bHi;
        uint32_t aLo, bLo;
        int64_t e, f, g, q;
        int i;
        uint32_t r;

        c0 = (uint32_t)-1;
        c1 = (uint32_t)-1;
        a0 = 0;
        a1 = 0;
        b0 = 0;
        b1 = 0;
        j = size;
        while (j-- > 0)
        {
            uint32_t t, w;

            t = a2[j];
            w = b2[j];
            a0 ^= (a0 ^ t) & c0;
            a1 ^= (a1 ^ t) & c1;
            b0 ^= (b0 ^ w) & c0;
            b1 ^= (b1 ^ w) & c1;
            c1 = c0;
            c0 &= (((t | w) + 0x7FFFFFFF) >> 31) - (uint32_t)1;
        }

        a1 |= a0 & c1;
        a0 &= ~c1;
        b1 |= b0 & c1;
        b0 &= ~c1;
        aHi = ((uint64_t)a0 << 31) + a1;
        bHi = ((uint64_t)b0 << 31) + b1;
        aLo = a2[0];
        bLo = b2[0];

        e = 1;
        f = 0;
        g = 0;
        q = 1;
        for (i = 0; i < 31; i++)
        {

            uint32_t rt, oa, ob, cAB, cBA, cA;
            uint64_t rz;


            rz = bHi - aHi;
            rt = (uint32_t)((rz ^ ((aHi ^ bHi) & (aHi ^ rz))) >> 63);


            oa = (aLo >> i) & 1;
            ob = (bLo >> i) & 1;
            cAB = oa & ob & rt;
            cBA = oa & ob & ~rt;
            cA = cAB | (oa ^ 1);

            aLo -= bLo & -cAB;
            aHi -= bHi & -(uint64_t)cAB;
            e -= g & -(int64_t)cAB;
            f -= q & -(int64_t)cAB;
            bLo -= aLo & -cBA;
            bHi -= aHi & -(uint64_t)cBA;
            g -= e & -(int64_t)cBA;
            q -= f & -(int64_t)cBA;


            aLo += aLo & (cA - 1);
            e += e & ((int64_t)cA - 1);
            f += f & ((int64_t)cA - 1);
            aHi ^= (aHi ^ (aHi >> 1)) & -(uint64_t)cA;
            bLo += bLo & -cA;
            g += g & -(int64_t)cA;
            q += q & -(int64_t)cA;
            bHi ^= (bHi ^ (bHi >> 1)) & ((uint64_t)cA - 1);
        }

        r = zint_co_reduce(a2, b2, size, e, f, g, q);
        e -= (e + e) & -(int64_t)(r & 1);
        f -= (f + f) & -(int64_t)(r & 1);
        g -= (g + g) & -(int64_t)(r >> 1);
        q -= (q + q) & -(int64_t)(r >> 1);
        zint_co_reduce_mod(a00, a11, d, size, d0, e, f, g, q);
        zint_co_reduce_mod(b00, b11, c, size, h, e, f, g, q);
    }

    k = a2[0] ^ 1;
    for (j = 1; j < size; j++)
    {
        k |= a2[j];
    }
    return (int)((1 - ((k | -k) >> 31)) & c[0] & d[0]);
}


static void zint_add_scaled_mul_small(
    uint32_t * a, size_t asize, const uint32_t * b, size_t bsize, int32_t k, uint32_t sh, uint32_t sl
)
{
    size_t counter;
    uint32_t bsign, d;
    int32_t c;

    if (bsize == 0)
    {
        return;
    }

    bsign = -(b[bsize - 1] >> 30) >> 1;
    d = 0;
    c = 0;
    for (counter = sh; counter < asize; counter++)
    {
        size_t l;
        uint32_t e, h, g;
        uint64_t z;

        l = counter - sh;
        e = l < bsize ? b[l] : bsign;
        h = ((e << sl) & 0x7FFFFFFF) | d;
        d = e >> (31 - sl);

        z = (uint64_t)((int64_t)h * (int64_t)k + (int64_t)a[counter] + c);
        a[counter] = (uint32_t)z & 0x7FFFFFFF;

        g = (uint32_t)(z >> 31);
        c = *(int32_t *)&g;
    }
}


static void zint_sub_scaled(uint32_t * a, size_t asize, const uint32_t * b, size_t bsize, uint32_t sh, uint32_t sl)
{
    size_t counter;
    uint32_t ysign, d;
    uint32_t c;

    if (bsize == 0)
    {
        return;
    }

    ysign = -(b[bsize - 1] >> 30) >> 1;
    d = 0;
    c = 0;
    for (counter = sh; counter < asize; counter++)
    {
        size_t l;
        uint32_t p, k, u;

        l = counter - sh;
        k = l < bsize ? b[l] : ysign;
        u = ((k << sl) & 0x7FFFFFFF) | d;
        d = k >> (31 - sl);

        p = a[counter] - u - c;
        a[counter] = p & 0x7FFFFFFF;
        c = p >> 31;
    }
}


static inline int32_t zint_one_to_plain(const uint32_t * a)
{
    uint32_t rez;

    rez = a[0];
    rez |= (rez & 0x40000000) << 1;
    return *(int32_t *)&rez;
}

static void poly_big_to_fp(fpr * d, const uint32_t * f, size_t lize, size_t ltrd, unsigned degIndex)
{
    size_t elemNum, counter;

    elemNum = MKN(degIndex);
    if (lize == 0)
    {
        for (counter = 0; counter < elemNum; counter++)
        {
            d[counter] = fpr_zero;
        }
        return;
    }
    for (counter = 0; counter < elemNum; counter++, f += ltrd)
    {
        size_t v;
        uint32_t neg, c, xm;
        fpr x, lc;

        neg = -(f[lize - 1] >> 30);
        xm = neg >> 1;
        c = neg & 1;
        x = fpr_zero;
        lc = fpr_one;
        for (v = 0; v < lize; v++, lc = fpr_mul(lc, fpr_ptwo31))
        {
            uint32_t l;

            l = (f[v] ^ xm) + c;
            c = l >> 31;
            l &= 0x7FFFFFFF;
            l -= (l << 1) & neg;
            x = fpr_add(x, fpr_mul(fpr_of(*(int32_t *)&l), lc));
        }
        d[counter] = x;
    }
}


static int poly_big_to_small(int8_t * d, const uint32_t * s, int lim, unsigned degIndex)
{
    size_t elemNum, counter;

    elemNum = MKN(degIndex);
    for (counter = 0; counter < elemNum; counter++)
    {
        int32_t k;

        k = zint_one_to_plain(s + counter);
        if (k < -lim || k > lim)
        {
            return 0;
        }
        d[counter] = (int8_t)k;
    }
    return 1;
}


static void poly_sub_scaled(
    uint32_t * A, size_t Asize, size_t Astrd, const uint32_t * f, size_t lize, size_t ltrd, const int32_t * k,
    uint32_t sh, uint32_t sl, unsigned degIndex
)
{
    size_t elemNum, counter;

    elemNum = MKN(degIndex);
    for (counter = 0; counter < elemNum; counter++)
    {
        int32_t l;
        size_t h;
        uint32_t * a;
        const uint32_t * b;

        l = -k[counter];
        a = A + counter * Astrd;
        b = f;
        for (h = 0; h < elemNum; h++)
        {
            zint_add_scaled_mul_small(a, Asize, b, lize, l, sh, sl);
            if (counter + h == elemNum - 1)
            {
                a = A;
                l = -l;
            }
            else
            {
                a += Astrd;
            }
            b += ltrd;
        }
    }
}

static void poly_sub_scaled_ntt(
    uint32_t * A, size_t Asize, size_t Astrd, const uint32_t * a, size_t asize, size_t astrd, const int32_t * k,
    uint32_t sh, uint32_t sl, unsigned degIndex, uint32_t * temp
)
{
    uint32_t *l, *g, *q, *w, *x;
    const uint32_t * y;
    size_t elemNum, counter, tsize;
    const small_prime * primes;

    elemNum = MKN(degIndex);
    tsize = asize + 1;
    l = temp;
    g = l + MKN(degIndex);
    q = g + MKN(degIndex);
    w = q + elemNum * tsize;

    primes = PRIMES;


    for (counter = 0; counter < tsize; counter++)
    {
        uint32_t p, c0, R2, Rx;
        size_t v;

        p = primes[counter].p;
        c0 = modp_ninv_31(p);
        R2 = modp_r_2(p, c0);
        Rx = modp_rx((unsigned)asize, p, c0, R2);
        modp_mkgm_2(l, g, degIndex, primes[counter].g, p, c0);

        for (v = 0; v < elemNum; v++)
        {
            w[v] = modp_set(k[v], p);
        }
        modp_NTT2(w, l, degIndex, p, c0);
        for (v = 0, y = a, x = q + counter; v < elemNum; v++, y += astrd, x += tsize)
        {
            *x = zint_mod_small_signed(y, asize, p, c0, R2, Rx);
        }
        modp_ntt_2_ext(q + counter, tsize, l, degIndex, p, c0);
        for (v = 0, x = q + counter; v < elemNum; v++, x += tsize)
        {
            *x = modp_montymul(modp_montymul(w[v], *x, p, c0), R2, p, c0);
        }
        modp_i_ntt_2_ext(q + counter, tsize, g, degIndex, p, c0);
    }

    zint_rebuild_crt(q, tsize, tsize, elemNum, primes, 1, w);

    for (counter = 0, x = A, y = q; counter < elemNum; counter++, x += Astrd, y += tsize)
    {
        zint_sub_scaled(x, Asize, y, tsize, sh, sl);
    }
}

static inline uint64_t get_rng_u_64(inner_shake256_context * ctxt)
{
#ifndef __BIG_ENDIAN__
    uint64_t rez;

    shake_256_extract(((shake256_context *)ctxt), BufferView::from_single(rez));
    return rez;
#else
    uint8_t temp[8];

    shake_256_extract(((shake256_context *)ctxt), BufferView(temp, sizeof temp));
    return (uint64_t)temp[0] | ((uint64_t)temp[1] << 8) | ((uint64_t)temp[2] << 16) | ((uint64_t)temp[3] << 24) |
           ((uint64_t)temp[4] << 32) | ((uint64_t)temp[5] << 40) | ((uint64_t)temp[6] << 48) |
           ((uint64_t)temp[7] << 56);
#endif
}

static const uint64_t gauss_1024_12289[] = {
    1283868770400643928u,
    6416574995475331444u,
    4078260278032692663u,
    2353523259288686585u,
    1227179971273316331u,
    575931623374121527u,
    242543240509105209u,
    91437049221049666u,
    30799446349977173u,
    9255276791179340u,
    2478152334826140u,
    590642893610164u,
    125206034929641u,
    23590435911403u,
    3948334035941u,
    586753615614u,
    77391054539u,
    9056793210u,
    940121950u,
    86539696u,
    7062824u,
    510971u,
    32764u,
    1862u,
    94u,
    4u,
    0u};


static int mkgauss(inner_shake256_context * ctxt, unsigned degIndex)
{
    unsigned counter, k;
    int rez;

    k = 1U << (10 - degIndex);
    rez = 0;
    for (counter = 0; counter < k; counter++)
    {

        uint64_t r;
        uint32_t f, l, K, ng;

        r = get_rng_u_64(ctxt);
        ng = (uint32_t)(r >> 63);
        r &= ~((uint64_t)1 << 63);
        f = (uint32_t)((r - gauss_1024_12289[0]) >> 63);

        l = 0;
        r = get_rng_u_64(ctxt);
        r &= ~((uint64_t)1 << 63);
        for (K = 1; K < (sizeof gauss_1024_12289) / (sizeof gauss_1024_12289[0]); K++)
        {
            uint32_t t;

            t = (uint32_t)((r - gauss_1024_12289[K]) >> 63) ^ 1;
            l |= K & -(t & (f ^ 1));
            f |= t;
        }

        l = (l ^ -ng) + ng;

        rez += *(int32_t *)&l;
    }
    return rez;
}


static const size_t MAX_BL_SMALL[] = {1, 1, 2, 2, 4, 7, 14, 27, 53, 106, 209};

static const size_t MAX_BL_LARGE[] = {2, 2, 5, 7, 12, 21, 40, 78, 157, 308};

static const struct
{
    int avg;
    int std;
} BITLENGTH[] = {{4, 0},   {11, 1},  {24, 1},   {50, 1},    {102, 1},  {202, 2},
                 {401, 4}, {794, 5}, {1577, 8}, {3138, 13}, {6308, 25}};

#define DEPTH_INT_FG 4

static uint32_t poly_small_sqnorm(const int8_t * a, unsigned degIndex)
{
    size_t elemNum, counter;
    uint32_t l, k;

    elemNum = MKN(degIndex);
    l = 0;
    k = 0;
    for (counter = 0; counter < elemNum; counter++)
    {
        int32_t z;

        z = a[counter];
        l += (uint32_t)(z * z);
        k |= l;
    }
    return l | -(k >> 31);
}

static fpr * align_fpr(void * base, void * data)
{
    uint8_t *l, *t;
    size_t k, f;

    l = (uint8_t *)base;
    t = (uint8_t *)data;
    k = (size_t)(t - l);
    f = k % sizeof(fpr);
    if (f)
    {
        k += (sizeof(fpr)) - f;
    }
    return (fpr *)(l + k);
}

static uint32_t * align_u_32(void * base, void * data)
{
    uint8_t *l, *t;
    size_t k, f;

    l = (uint8_t *)base;
    t = (uint8_t *)data;
    k = (size_t)(t - l);
    f = k % sizeof(uint32_t);
    if (f)
    {
        k += (sizeof(uint32_t)) - f;
    }
    return (uint32_t *)(l + k);
}


static void poly_small_to_fp(fpr * x, const int8_t * f, unsigned degIndex)
{
    size_t elemNum, counter;

    elemNum = MKN(degIndex);
    for (counter = 0; counter < elemNum; counter++)
    {
        x[counter] = fpr_of(f[counter]);
    }
}


static void make_fg_step(uint32_t * data, unsigned degIndex, unsigned depns, int in_ntt, int out_ntt)
{
    size_t elemNum, e, counter;
    size_t ssize, tsize;
    uint32_t *k, *q1, *l, *f, *g, *h, *w;
    const small_prime * prms;

    elemNum = (size_t)1 << degIndex;
    e = elemNum >> 1;
    ssize = MAX_BL_SMALL[depns];
    tsize = MAX_BL_SMALL[depns + 1];
    prms = PRIMES;

    k = data;
    q1 = k + e * tsize;
    l = q1 + e * tsize;
    f = l + elemNum * ssize;
    g = f + elemNum * ssize;
    h = g + elemNum;
    w = h + elemNum;
    memmove(l, data, 2 * elemNum * ssize * sizeof *data);


    for (counter = 0; counter < ssize; counter++)
    {
        uint32_t q, c0, c;
        size_t d;
        uint32_t * a;

        q = prms[counter].p;
        c0 = modp_ninv_31(q);
        c = modp_r_2(q, c0);
        modp_mkgm_2(g, h, degIndex, prms[counter].g, q, c0);

        for (d = 0, a = l + counter; d < elemNum; d++, a += ssize)
        {
            w[d] = *a;
        }
        if (!in_ntt)
        {
            modp_NTT2(w, g, degIndex, q, c0);
        }
        for (d = 0, a = k + counter; d < e; d++, a += tsize)
        {
            uint32_t w0, w1;

            w0 = w[(d << 1) + 0];
            w1 = w[(d << 1) + 1];
            *a = modp_montymul(modp_montymul(w0, w1, q, c0), c, q, c0);
        }
        if (in_ntt)
        {
            modp_i_ntt_2_ext(l + counter, ssize, h, degIndex, q, c0);
        }

        for (d = 0, a = f + counter; d < elemNum; d++, a += ssize)
        {
            w[d] = *a;
        }
        if (!in_ntt)
        {
            modp_NTT2(w, g, degIndex, q, c0);
        }
        for (d = 0, a = q1 + counter; d < e; d++, a += tsize)
        {
            uint32_t w0, w1;

            w0 = w[(d << 1) + 0];
            w1 = w[(d << 1) + 1];
            *a = modp_montymul(modp_montymul(w0, w1, q, c0), c, q, c0);
        }
        if (in_ntt)
        {
            modp_i_ntt_2_ext(f + counter, ssize, h, degIndex, q, c0);
        }

        if (!out_ntt)
        {
            modp_i_ntt_2_ext(k + counter, tsize, h, degIndex - 1, q, c0);
            modp_i_ntt_2_ext(q1 + counter, tsize, h, degIndex - 1, q, c0);
        }
    }

    zint_rebuild_crt(l, ssize, ssize, elemNum, prms, 1, g);
    zint_rebuild_crt(f, ssize, ssize, elemNum, prms, 1, g);

    for (counter = ssize; counter < tsize; counter++)
    {
        uint32_t q, c0, c, v;
        size_t d;
        uint32_t * a;

        q = prms[counter].p;
        c0 = modp_ninv_31(q);
        c = modp_r_2(q, c0);
        v = modp_rx((unsigned)ssize, q, c0, c);
        modp_mkgm_2(g, h, degIndex, prms[counter].g, q, c0);
        for (d = 0, a = l; d < elemNum; d++, a += ssize)
        {
            w[d] = zint_mod_small_signed(a, ssize, q, c0, c, v);
        }
        modp_NTT2(w, g, degIndex, q, c0);
        for (d = 0, a = k + counter; d < e; d++, a += tsize)
        {
            uint32_t w0, w1;

            w0 = w[(d << 1) + 0];
            w1 = w[(d << 1) + 1];
            *a = modp_montymul(modp_montymul(w0, w1, q, c0), c, q, c0);
        }
        for (d = 0, a = f; d < elemNum; d++, a += ssize)
        {
            w[d] = zint_mod_small_signed(a, ssize, q, c0, c, v);
        }
        modp_NTT2(w, g, degIndex, q, c0);
        for (d = 0, a = q1 + counter; d < e; d++, a += tsize)
        {
            uint32_t w0, w1;

            w0 = w[(d << 1) + 0];
            w1 = w[(d << 1) + 1];
            *a = modp_montymul(modp_montymul(w0, w1, q, c0), c, q, c0);
        }

        if (!out_ntt)
        {
            modp_i_ntt_2_ext(k + counter, tsize, h, degIndex - 1, q, c0);
            modp_i_ntt_2_ext(q1 + counter, tsize, h, degIndex - 1, q, c0);
        }
    }
}


static void make_fg(uint32_t * data, const int8_t * a, const int8_t * b, unsigned degIndex, unsigned depns, int out_ntt)
{
    size_t elemNum, counter;
    uint32_t *k, *l, p0;
    unsigned d;
    const small_prime * prms;

    elemNum = MKN(degIndex);
    k = data;
    l = k + elemNum;
    prms = PRIMES;
    p0 = prms[0].p;
    for (counter = 0; counter < elemNum; counter++)
    {
        k[counter] = modp_set(a[counter], p0);
        l[counter] = modp_set(b[counter], p0);
    }

    if (depns == 0 && out_ntt)
    {
        uint32_t *p, *h;
        uint32_t p1, c0;

        p1 = prms[0].p;
        c0 = modp_ninv_31(p1);
        p = l + elemNum;
        h = p + MKN(degIndex);
        modp_mkgm_2(p, h, degIndex, prms[0].g, p1, c0);
        modp_NTT2(k, p, degIndex, p1, c0);
        modp_NTT2(l, p, degIndex, p1, c0);
        return;
    }

    for (d = 0; d < depns; d++)
    {
        make_fg_step(data, degIndex - d, d, d != 0, (d + 1) < depns || out_ntt);
    }
}


static int solve_ntru_deepest(unsigned degIndex_top, const int8_t * a, const int8_t * b, uint32_t * temp)
{
    size_t size;
    uint32_t *k, *l, *t, *d, *e, q;
    const small_prime * prms;

    size = MAX_BL_SMALL[degIndex_top];
    prms = PRIMES;

    k = temp;
    l = k + size;
    t = l + size;
    d = t + size;
    e = d + size;

    make_fg(t, a, b, degIndex_top, degIndex_top, 0);

    zint_rebuild_crt(t, size, size, 2, prms, 0, e);

    if (!zint_bezout(l, k, t, d, size, e))
    {
        return 0;
    }


    q = 12289;
    if (zint_mul_small(k, size, q) != 0 || zint_mul_small(l, size, q) != 0)
    {
        return 0;
    }

    return 1;
}


static int
solve_ntru_intermediate(unsigned degIndex_top, const int8_t * a, const int8_t * b, unsigned deepns, uint32_t * tmp)
{

    unsigned degIndx;
    size_t n, hn, slen, dlen, llen, rlen, FGlen, u;
    uint32_t *Fd, *Gd, *Ft, *Gt, *ft, *gt, *t1;
    fpr *rt1, *rt2, *rt3, *rt4, *rt5;
    int scale_fg, minbl_fg, maxbl_fg, maxbl_FG, scale_k;
    uint32_t *x, *y;
    int32_t * k;
    const small_prime * primes;

    degIndx = degIndex_top - deepns;
    n = (size_t)1 << degIndx;
    hn = n >> 1;

    slen = MAX_BL_SMALL[deepns];
    dlen = MAX_BL_SMALL[deepns + 1];
    llen = MAX_BL_LARGE[deepns];
    primes = PRIMES;


    Fd = tmp;
    Gd = Fd + dlen * hn;


    ft = Gd + dlen * hn;
    make_fg(ft, a, b, degIndex_top, deepns, 1);


    Ft = tmp;
    Gt = Ft + n * llen;
    t1 = Gt + n * llen;
    memmove(t1, ft, 2 * n * slen * sizeof *ft);
    ft = t1;
    gt = ft + slen * n;
    t1 = gt + slen * n;


    memmove(t1, Fd, 2 * hn * dlen * sizeof *Fd);
    Fd = t1;
    Gd = Fd + hn * dlen;


    for (u = 0; u < llen; u++)
    {
        uint32_t p, p0i, R2, Rx;
        size_t v;
        uint32_t *xs, *ys, *xd, *yd;

        p = primes[u].p;
        p0i = modp_ninv_31(p);
        R2 = modp_r_2(p, p0i);
        Rx = modp_rx((unsigned)dlen, p, p0i, R2);
        for (v = 0, xs = Fd, ys = Gd, xd = Ft + u, yd = Gt + u; v < hn;
             v++, xs += dlen, ys += dlen, xd += llen, yd += llen)
        {
            *xd = zint_mod_small_signed(xs, dlen, p, p0i, R2, Rx);
            *yd = zint_mod_small_signed(ys, dlen, p, p0i, R2, Rx);
        }
    }


    for (u = 0; u < llen; u++)
    {
        uint32_t p, p0i, R2;
        uint32_t *gm, *igm, *fx, *gx, *Fp, *Gp;
        size_t v;


        p = primes[u].p;
        p0i = modp_ninv_31(p);
        R2 = modp_r_2(p, p0i);


        if (u == slen)
        {
            zint_rebuild_crt(ft, slen, slen, n, primes, 1, t1);
            zint_rebuild_crt(gt, slen, slen, n, primes, 1, t1);
        }

        gm = t1;
        igm = gm + n;
        fx = igm + n;
        gx = fx + n;

        modp_mkgm_2(gm, igm, degIndx, primes[u].g, p, p0i);

        if (u < slen)
        {
            for (v = 0, x = ft + u, y = gt + u; v < n; v++, x += slen, y += slen)
            {
                fx[v] = *x;
                gx[v] = *y;
            }
            modp_i_ntt_2_ext(ft + u, slen, igm, degIndx, p, p0i);
            modp_i_ntt_2_ext(gt + u, slen, igm, degIndx, p, p0i);
        }
        else
        {
            uint32_t Rx;

            Rx = modp_rx((unsigned)slen, p, p0i, R2);
            for (v = 0, x = ft, y = gt; v < n; v++, x += slen, y += slen)
            {
                fx[v] = zint_mod_small_signed(x, slen, p, p0i, R2, Rx);
                gx[v] = zint_mod_small_signed(y, slen, p, p0i, R2, Rx);
            }
            modp_NTT2(fx, gm, degIndx, p, p0i);
            modp_NTT2(gx, gm, degIndx, p, p0i);
        }


        Fp = gx + n;
        Gp = Fp + hn;
        for (v = 0, x = Ft + u, y = Gt + u; v < hn; v++, x += llen, y += llen)
        {
            Fp[v] = *x;
            Gp[v] = *y;
        }
        modp_NTT2(Fp, gm, degIndx - 1, p, p0i);
        modp_NTT2(Gp, gm, degIndx - 1, p, p0i);

        for (v = 0, x = Ft + u, y = Gt + u; v < hn; v++, x += (llen << 1), y += (llen << 1))
        {
            uint32_t ftA, ftB, gtA, gtB;
            uint32_t mFp, mGp;

            ftA = fx[(v << 1) + 0];
            ftB = fx[(v << 1) + 1];
            gtA = gx[(v << 1) + 0];
            gtB = gx[(v << 1) + 1];
            mFp = modp_montymul(Fp[v], R2, p, p0i);
            mGp = modp_montymul(Gp[v], R2, p, p0i);
            x[0] = modp_montymul(gtB, mFp, p, p0i);
            x[llen] = modp_montymul(gtA, mFp, p, p0i);
            y[0] = modp_montymul(ftB, mGp, p, p0i);
            y[llen] = modp_montymul(ftA, mGp, p, p0i);
        }
        modp_i_ntt_2_ext(Ft + u, llen, igm, degIndx, p, p0i);
        modp_i_ntt_2_ext(Gt + u, llen, igm, degIndx, p, p0i);
    }

    zint_rebuild_crt(Ft, llen, llen, n, primes, 1, t1);
    zint_rebuild_crt(Gt, llen, llen, n, primes, 1, t1);


    rt3 = align_fpr(tmp, t1);
    rt4 = rt3 + n;
    rt5 = rt4 + n;
    rt1 = rt5 + (n >> 1);
    k = (int32_t *)align_u_32(tmp, rt1);
    rt2 = align_fpr(tmp, k + n);
    if (rt2 < (rt1 + n))
    {
        rt2 = rt1 + n;
    }
    t1 = (uint32_t *)k + n;

    rlen = (slen > 10) ? 10 : slen;
    poly_big_to_fp(rt3, ft + slen - rlen, rlen, slen, degIndx);
    poly_big_to_fp(rt4, gt + slen - rlen, rlen, slen, degIndx);


    scale_fg = 31 * (int)(slen - rlen);


    minbl_fg = BITLENGTH[deepns].avg - 6 * BITLENGTH[deepns].std;
    maxbl_fg = BITLENGTH[deepns].avg + 6 * BITLENGTH[deepns].std;

    fft(rt3, degIndx);
    fft(rt4, degIndx);
    poly_invnorm_2_fft(rt5, rt3, rt4, degIndx);
    poly_adj_fft(rt3, degIndx);
    poly_adj_fft(rt4, degIndx);

    FGlen = llen;
    maxbl_FG = 31 * (int)llen;

    scale_k = maxbl_FG - minbl_fg;

    for (;;)
    {
        int scale_FG, dc, new_maxbl_FG;
        uint32_t scl, sch;
        fpr pdc, pt;


        rlen = (FGlen > 10) ? 10 : FGlen;
        scale_FG = 31 * (int)(FGlen - rlen);
        poly_big_to_fp(rt1, Ft + FGlen - rlen, rlen, llen, degIndx);
        poly_big_to_fp(rt2, Gt + FGlen - rlen, rlen, llen, degIndx);

        fft(rt1, degIndx);
        fft(rt2, degIndx);
        poly_mul_fft(rt1, rt3, degIndx);
        poly_mul_fft(rt2, rt4, degIndx);
        poly_add(rt2, rt1, degIndx);
        poly_mul_autoadj_fft(rt2, rt5, degIndx);
        i_fft(rt2, degIndx);


        dc = scale_k - scale_FG + scale_fg;

        if (dc < 0)
        {
            dc = -dc;
            pt = fpr_two;
        }
        else
        {
            pt = fpr_onehalf;
        }
        pdc = fpr_one;
        while (dc != 0)
        {
            if ((dc & 1) != 0)
            {
                pdc = fpr_mul(pdc, pt);
            }
            dc >>= 1;
            pt = fpr_sqr(pt);
        }

        for (u = 0; u < n; u++)
        {
            fpr xv;

            xv = fpr_mul(rt2[u], pdc);

            if (!fpr_lt(fpr_mtwo31m1, xv) || !fpr_lt(xv, fpr_ptwo31m1))
            {
                return 0;
            }
            k[u] = (int32_t)fpr_rint(xv);
        }

        sch = (uint32_t)(scale_k / 31);
        scl = (uint32_t)(scale_k % 31);
        if (deepns <= DEPTH_INT_FG)
        {
            poly_sub_scaled_ntt(Ft, FGlen, llen, ft, slen, slen, k, sch, scl, degIndx, t1);
            poly_sub_scaled_ntt(Gt, FGlen, llen, gt, slen, slen, k, sch, scl, degIndx, t1);
        }
        else
        {
            poly_sub_scaled(Ft, FGlen, llen, ft, slen, slen, k, sch, scl, degIndx);
            poly_sub_scaled(Gt, FGlen, llen, gt, slen, slen, k, sch, scl, degIndx);
        }

        new_maxbl_FG = scale_k + maxbl_fg + 10;
        if (new_maxbl_FG < maxbl_FG)
        {
            maxbl_FG = new_maxbl_FG;
            if ((int)FGlen * 31 >= maxbl_FG + 31)
            {
                FGlen--;
            }
        }

        if (scale_k <= 0)
        {
            break;
        }
        scale_k -= 25;
        if (scale_k < 0)
        {
            scale_k = 0;
        }
    }


    if (FGlen < slen)
    {
        for (u = 0; u < n; u++, Ft += llen, Gt += llen)
        {
            size_t v;
            uint32_t sw;

            sw = -(Ft[FGlen - 1] >> 30) >> 1;
            for (v = FGlen; v < slen; v++)
            {
                Ft[v] = sw;
            }
            sw = -(Gt[FGlen - 1] >> 30) >> 1;
            for (v = FGlen; v < slen; v++)
            {
                Gt[v] = sw;
            }
        }
    }


    for (u = 0, x = tmp, y = tmp; u < (n << 1); u++, x += slen, y += llen)
    {
        memmove(x, y, slen * sizeof *y);
    }
    return 1;
}


static int solve_ntru_binary_depth_1(unsigned degIndex_top, const int8_t * a, const int8_t * b, uint32_t * tmp)
{
    unsigned deepns, degIndx;
    size_t n_top, n, hn, slen, dlen, llen, u;
    uint32_t *Fd, *Gd, *Ft, *Gt, *ft, *gt, *t1;
    fpr *rt1, *rt2, *rt3, *rt4, *rt5, *rt6;
    uint32_t *x, *y;

    deepns = 1;
    n_top = (size_t)1 << degIndex_top;
    degIndx = degIndex_top - deepns;
    n = (size_t)1 << degIndx;
    hn = n >> 1;

    slen = MAX_BL_SMALL[deepns];
    dlen = MAX_BL_SMALL[deepns + 1];
    llen = MAX_BL_LARGE[deepns];


    Fd = tmp;
    Gd = Fd + dlen * hn;
    Ft = Gd + dlen * hn;
    Gt = Ft + llen * n;


    for (u = 0; u < llen; u++)
    {
        uint32_t p, p0i, R2, Rx;
        size_t v;
        uint32_t *xs, *ys, *xd, *yd;

        p = PRIMES[u].p;
        p0i = modp_ninv_31(p);
        R2 = modp_r_2(p, p0i);
        Rx = modp_rx((unsigned)dlen, p, p0i, R2);
        for (v = 0, xs = Fd, ys = Gd, xd = Ft + u, yd = Gt + u; v < hn;
             v++, xs += dlen, ys += dlen, xd += llen, yd += llen)
        {
            *xd = zint_mod_small_signed(xs, dlen, p, p0i, R2, Rx);
            *yd = zint_mod_small_signed(ys, dlen, p, p0i, R2, Rx);
        }
    }


    memmove(tmp, Ft, llen * n * sizeof(uint32_t));
    Ft = tmp;
    memmove(Ft + llen * n, Gt, llen * n * sizeof(uint32_t));
    Gt = Ft + llen * n;
    ft = Gt + llen * n;
    gt = ft + slen * n;

    t1 = gt + slen * n;


    for (u = 0; u < llen; u++)
    {
        uint32_t p, p0i, R2;
        uint32_t *gm, *igm, *fx, *gx, *Fp, *Gp;
        unsigned e;
        size_t v;


        p = PRIMES[u].p;
        p0i = modp_ninv_31(p);
        R2 = modp_r_2(p, p0i);


        gm = t1;
        igm = gm + n_top;
        fx = igm + n;
        gx = fx + n_top;
        modp_mkgm_2(gm, igm, degIndex_top, PRIMES[u].g, p, p0i);


        for (v = 0; v < n_top; v++)
        {
            fx[v] = modp_set(a[v], p);
            gx[v] = modp_set(b[v], p);
        }


        modp_NTT2(fx, gm, degIndex_top, p, p0i);
        modp_NTT2(gx, gm, degIndex_top, p, p0i);
        for (e = degIndex_top; e > degIndx; e--)
        {
            modp_poly_rec_res(fx, e, p, p0i, R2);
            modp_poly_rec_res(gx, e, p, p0i, R2);
        }


        if (deepns > 0)
        {
            memmove(gm + n, igm, n * sizeof *igm);
            igm = gm + n;
            memmove(igm + n, fx, n * sizeof *ft);
            fx = igm + n;
            memmove(fx + n, gx, n * sizeof *gt);
            gx = fx + n;
        }


        Fp = gx + n;
        Gp = Fp + hn;
        for (v = 0, x = Ft + u, y = Gt + u; v < hn; v++, x += llen, y += llen)
        {
            Fp[v] = *x;
            Gp[v] = *y;
        }
        modp_NTT2(Fp, gm, degIndx - 1, p, p0i);
        modp_NTT2(Gp, gm, degIndx - 1, p, p0i);


        for (v = 0, x = Ft + u, y = Gt + u; v < hn; v++, x += (llen << 1), y += (llen << 1))
        {
            uint32_t ftA, ftB, gtA, gtB;
            uint32_t mFp, mGp;

            ftA = fx[(v << 1) + 0];
            ftB = fx[(v << 1) + 1];
            gtA = gx[(v << 1) + 0];
            gtB = gx[(v << 1) + 1];
            mFp = modp_montymul(Fp[v], R2, p, p0i);
            mGp = modp_montymul(Gp[v], R2, p, p0i);
            x[0] = modp_montymul(gtB, mFp, p, p0i);
            x[llen] = modp_montymul(gtA, mFp, p, p0i);
            y[0] = modp_montymul(ftB, mGp, p, p0i);
            y[llen] = modp_montymul(ftA, mGp, p, p0i);
        }
        modp_i_ntt_2_ext(Ft + u, llen, igm, degIndx, p, p0i);
        modp_i_ntt_2_ext(Gt + u, llen, igm, degIndx, p, p0i);


        if (u < slen)
        {
            modp_iNTT2(fx, igm, degIndx, p, p0i);
            modp_iNTT2(gx, igm, degIndx, p, p0i);
            for (v = 0, x = ft + u, y = gt + u; v < n; v++, x += slen, y += slen)
            {
                *x = fx[v];
                *y = gx[v];
            }
        }
    }


    zint_rebuild_crt(Ft, llen, llen, n << 1, PRIMES, 1, t1);
    zint_rebuild_crt(ft, slen, slen, n << 1, PRIMES, 1, t1);


    rt1 = align_fpr(tmp, gt + slen * n);
    rt2 = rt1 + n;
    poly_big_to_fp(rt1, Ft, llen, llen, degIndx);
    poly_big_to_fp(rt2, Gt, llen, llen, degIndx);


    memmove(tmp, ft, 2 * slen * n * sizeof *ft);
    ft = tmp;
    gt = ft + slen * n;
    rt3 = align_fpr(tmp, gt + slen * n);
    memmove(rt3, rt1, 2 * n * sizeof *rt1);
    rt1 = rt3;
    rt2 = rt1 + n;
    rt3 = rt2 + n;
    rt4 = rt3 + n;


    poly_big_to_fp(rt3, ft, slen, slen, degIndx);
    poly_big_to_fp(rt4, gt, slen, slen, degIndx);


    memmove(tmp, rt1, 4 * n * sizeof *rt1);
    rt1 = (fpr *)tmp;
    rt2 = rt1 + n;
    rt3 = rt2 + n;
    rt4 = rt3 + n;


    fft(rt1, degIndx);
    fft(rt2, degIndx);
    fft(rt3, degIndx);
    fft(rt4, degIndx);


    rt5 = rt4 + n;
    rt6 = rt5 + n;
    poly_add_muladj_fft(rt5, rt1, rt2, rt3, rt4, degIndx);
    poly_invnorm_2_fft(rt6, rt3, rt4, degIndx);


    poly_mul_autoadj_fft(rt5, rt6, degIndx);


    i_fft(rt5, degIndx);
    for (u = 0; u < n; u++)
    {
        fpr z;

        z = rt5[u];
        if (!fpr_lt(z, fpr_ptwo63m1) || !fpr_lt(fpr_mtwo63m1, z))
        {
            return 0;
        }
        rt5[u] = fpr_of(fpr_rint(z));
    }
    fft(rt5, degIndx);


    poly_mul_fft(rt3, rt5, degIndx);
    poly_mul_fft(rt4, rt5, degIndx);
    poly_sub(rt1, rt3, degIndx);
    poly_sub(rt2, rt4, degIndx);
    i_fft(rt1, degIndx);
    i_fft(rt2, degIndx);


    Ft = tmp;
    Gt = Ft + n;
    rt3 = align_fpr(tmp, Gt + n);
    memmove(rt3, rt1, 2 * n * sizeof *rt1);
    rt1 = rt3;
    rt2 = rt1 + n;
    for (u = 0; u < n; u++)
    {
        Ft[u] = (uint32_t)fpr_rint(rt1[u]);
        Gt[u] = (uint32_t)fpr_rint(rt2[u]);
    }

    return 1;
}


static int solve_ntru_binary_depth_0(unsigned degIndx, const int8_t * a, const int8_t * b, uint32_t * tmp)
{
    size_t n, hn, u;
    uint32_t p, p0i, R2;
    uint32_t *Fp, *Gp, *t1, *t2, *t3, *t4, *t5;
    uint32_t *gm, *igm, *ft, *gt;
    fpr *rt2, *rt3;

    n = (size_t)1 << degIndx;
    hn = n >> 1;


    p = PRIMES[0].p;
    p0i = modp_ninv_31(p);
    R2 = modp_r_2(p, p0i);

    Fp = tmp;
    Gp = Fp + hn;
    ft = Gp + hn;
    gt = ft + n;
    gm = gt + n;
    igm = gm + n;

    modp_mkgm_2(gm, igm, degIndx, PRIMES[0].g, p, p0i);

    for (u = 0; u < hn; u++)
    {
        Fp[u] = modp_set(zint_one_to_plain(Fp + u), p);
        Gp[u] = modp_set(zint_one_to_plain(Gp + u), p);
    }
    modp_NTT2(Fp, gm, degIndx - 1, p, p0i);
    modp_NTT2(Gp, gm, degIndx - 1, p, p0i);


    for (u = 0; u < n; u++)
    {
        ft[u] = modp_set(a[u], p);
        gt[u] = modp_set(b[u], p);
    }
    modp_NTT2(ft, gm, degIndx, p, p0i);
    modp_NTT2(gt, gm, degIndx, p, p0i);


    for (u = 0; u < n; u += 2)
    {
        uint32_t ftA, ftB, gtA, gtB;
        uint32_t mFp, mGp;

        ftA = ft[u + 0];
        ftB = ft[u + 1];
        gtA = gt[u + 0];
        gtB = gt[u + 1];
        mFp = modp_montymul(Fp[u >> 1], R2, p, p0i);
        mGp = modp_montymul(Gp[u >> 1], R2, p, p0i);
        ft[u + 0] = modp_montymul(gtB, mFp, p, p0i);
        ft[u + 1] = modp_montymul(gtA, mFp, p, p0i);
        gt[u + 0] = modp_montymul(ftB, mGp, p, p0i);
        gt[u + 1] = modp_montymul(ftA, mGp, p, p0i);
    }
    modp_iNTT2(ft, igm, degIndx, p, p0i);
    modp_iNTT2(gt, igm, degIndx, p, p0i);

    Gp = Fp + n;
    t1 = Gp + n;
    memmove(Fp, ft, 2 * n * sizeof *ft);


    t2 = t1 + n;
    t3 = t2 + n;
    t4 = t3 + n;
    t5 = t4 + n;


    modp_mkgm_2(t1, t2, degIndx, PRIMES[0].g, p, p0i);


    modp_NTT2(Fp, t1, degIndx, p, p0i);
    modp_NTT2(Gp, t1, degIndx, p, p0i);

    t4[0] = t5[0] = modp_set(a[0], p);
    for (u = 1; u < n; u++)
    {
        t4[u] = modp_set(a[u], p);
        t5[n - u] = modp_set(-a[u], p);
    }
    modp_NTT2(t4, t1, degIndx, p, p0i);
    modp_NTT2(t5, t1, degIndx, p, p0i);


    for (u = 0; u < n; u++)
    {
        uint32_t w;

        w = modp_montymul(t5[u], R2, p, p0i);
        t2[u] = modp_montymul(w, Fp[u], p, p0i);
        t3[u] = modp_montymul(w, t4[u], p, p0i);
    }


    t4[0] = t5[0] = modp_set(b[0], p);
    for (u = 1; u < n; u++)
    {
        t4[u] = modp_set(b[u], p);
        t5[n - u] = modp_set(-b[u], p);
    }
    modp_NTT2(t4, t1, degIndx, p, p0i);
    modp_NTT2(t5, t1, degIndx, p, p0i);


    for (u = 0; u < n; u++)
    {
        uint32_t w;

        w = modp_montymul(t5[u], R2, p, p0i);
        t2[u] = modp_add(t2[u], modp_montymul(w, Gp[u], p, p0i), p);
        t3[u] = modp_add(t3[u], modp_montymul(w, t4[u], p, p0i), p);
    }


    modp_mkgm_2(t1, t4, degIndx, PRIMES[0].g, p, p0i);
    modp_iNTT2(t2, t4, degIndx, p, p0i);
    modp_iNTT2(t3, t4, degIndx, p, p0i);
    for (u = 0; u < n; u++)
    {
        t1[u] = (uint32_t)modp_norm(t2[u], p);
        t2[u] = (uint32_t)modp_norm(t3[u], p);
    }


    rt3 = align_fpr(tmp, t3);
    for (u = 0; u < n; u++)
    {
        rt3[u] = fpr_of(((int32_t *)t2)[u]);
    }
    fft(rt3, degIndx);
    rt2 = align_fpr(tmp, t2);
    memmove(rt2, rt3, hn * sizeof *rt3);


    rt3 = rt2 + hn;
    for (u = 0; u < n; u++)
    {
        rt3[u] = fpr_of(((int32_t *)t1)[u]);
    }
    fft(rt3, degIndx);

    poly_div_autoadj_fft(rt3, rt2, degIndx);
    i_fft(rt3, degIndx);
    for (u = 0; u < n; u++)
    {
        t1[u] = modp_set((int32_t)fpr_rint(rt3[u]), p);
    }


    t2 = t1 + n;
    t3 = t2 + n;
    t4 = t3 + n;
    t5 = t4 + n;
    modp_mkgm_2(t2, t3, degIndx, PRIMES[0].g, p, p0i);
    for (u = 0; u < n; u++)
    {
        t4[u] = modp_set(a[u], p);
        t5[u] = modp_set(b[u], p);
    }
    modp_NTT2(t1, t2, degIndx, p, p0i);
    modp_NTT2(t4, t2, degIndx, p, p0i);
    modp_NTT2(t5, t2, degIndx, p, p0i);
    for (u = 0; u < n; u++)
    {
        uint32_t kw;

        kw = modp_montymul(t1[u], R2, p, p0i);
        Fp[u] = modp_sub(Fp[u], modp_montymul(kw, t4[u], p, p0i), p);
        Gp[u] = modp_sub(Gp[u], modp_montymul(kw, t5[u], p, p0i), p);
    }
    modp_iNTT2(Fp, t3, degIndx, p, p0i);
    modp_iNTT2(Gp, t3, degIndx, p, p0i);
    for (u = 0; u < n; u++)
    {
        Fp[u] = (uint32_t)modp_norm(Fp[u], p);
        Gp[u] = (uint32_t)modp_norm(Gp[u], p);
    }

    return 1;
}


static int
solve_ntru(unsigned degIndex, int8_t * A, int8_t * B, const int8_t * a, const int8_t * b, int lim, uint32_t * temp)
{
    size_t elemNum, counter;
    uint32_t *l, *q, *k, *g, *gm;
    uint32_t p, c0, c;
    const small_prime * prms;

    elemNum = MKN(degIndex);

    if (!solve_ntru_deepest(degIndex, a, b, temp))
    {
        return 0;
    }


    if (degIndex <= 2)
    {
        unsigned depns;

        depns = degIndex;

        while (depns-- > 0)
        {
            if (!solve_ntru_intermediate(degIndex, a, b, depns, temp))
            {
                return 0;
            }
        }
    }
    else
    {
        unsigned depns;

        depns = degIndex;
        while (depns-- > 2)
        {
            if (!solve_ntru_intermediate(degIndex, a, b, depns, temp))
            {
                return 0;
            }
        }
        if (!solve_ntru_binary_depth_1(degIndex, a, b, temp))
        {
            return 0;
        }
        if (!solve_ntru_binary_depth_0(degIndex, a, b, temp))
        {
            return 0;
        }
    }


    if (B == NULL)
    {
        B = (int8_t *)(temp + 2 * elemNum);
    }


    if (!poly_big_to_small(A, temp, lim, degIndex) || !poly_big_to_small(B, temp + elemNum, lim, degIndex))
    {
        return 0;
    }


    g = temp;
    l = g + elemNum;
    q = l + elemNum;
    k = q + elemNum;
    gm = k + elemNum;

    prms = PRIMES;
    p = prms[0].p;
    c0 = modp_ninv_31(p);
    modp_mkgm_2(gm, temp, degIndex, prms[0].g, p, c0);
    for (counter = 0; counter < elemNum; counter++)
    {
        g[counter] = modp_set(B[counter], p);
    }
    for (counter = 0; counter < elemNum; counter++)
    {
        l[counter] = modp_set(a[counter], p);
        q[counter] = modp_set(b[counter], p);
        k[counter] = modp_set(A[counter], p);
    }
    modp_NTT2(l, gm, degIndex, p, c0);
    modp_NTT2(q, gm, degIndex, p, c0);
    modp_NTT2(k, gm, degIndex, p, c0);
    modp_NTT2(g, gm, degIndex, p, c0);
    c = modp_montymul(12289, 1, p, c0);
    for (counter = 0; counter < elemNum; counter++)
    {
        uint32_t w;

        w = modp_sub(modp_montymul(l[counter], g[counter], p, c0), modp_montymul(q[counter], k[counter], p, c0), p);
        if (w != c)
        {
            return 0;
        }
    }

    return 1;
}


static void poly_small_mkgauss(inner_shake256_context * cntxt, int8_t * a, unsigned degIndex)
{
    size_t elemNum, counter;
    unsigned md2;

    elemNum = MKN(degIndex);
    md2 = 0;
    for (counter = 0; counter < elemNum; counter++)
    {
        int b;

    restart:
        b = mkgauss(cntxt, degIndex);


        if (b < -127 || b > 127)
        {
            goto restart;
        }


        if (counter == elemNum - 1)
        {
            if ((md2 ^ (unsigned)(b & 1)) == 0)
            {
                goto restart;
            }
        }
        else
        {
            md2 ^= (unsigned)(b & 1);
        }
        a[counter] = (int8_t)b;
    }
}


void keygen(
    inner_shake256_context * cntxt, int8_t * a, int8_t * b, int8_t * A, int8_t * B, uint16_t * c, unsigned degIndex,
    uint8_t * temp
)
{

    size_t elemNum, counter;
    uint16_t *c2, *temp2;
    inner_shake256_context * cntxt2;

    elemNum = MKN(degIndex);
    cntxt2 = cntxt;

    for (;;)
    {
        fpr *k, *p, *t;
        fpr b_norm;
        uint32_t f_norm, g_norm, norm;
        int lim;


        poly_small_mkgauss(cntxt2, a, degIndex);
        poly_small_mkgauss(cntxt2, b, degIndex);


        lim = 1 << (max_fg_bits[degIndex] - 1);
        for (counter = 0; counter < elemNum; counter++)
        {

            if (a[counter] >= lim || a[counter] <= -lim || b[counter] >= lim || b[counter] <= -lim)
            {
                lim = -1;
                break;
            }
        }
        if (lim < 0)
        {
            continue;
        }

        f_norm = poly_small_sqnorm(a, degIndex);
        g_norm = poly_small_sqnorm(b, degIndex);
        norm = (f_norm + g_norm) | -((f_norm | g_norm) >> 31);
        if (norm >= 16823)
        {
            continue;
        }

        k = (fpr *)temp;
        p = k + elemNum;
        t = p + elemNum;
        poly_small_to_fp(k, a, degIndex);
        poly_small_to_fp(p, b, degIndex);
        fft(k, degIndex);
        fft(p, degIndex);
        poly_invnorm_2_fft(t, k, p, degIndex);
        poly_adj_fft(k, degIndex);
        poly_adj_fft(p, degIndex);
        poly_mulconst(k, fpr_q, degIndex);
        poly_mulconst(p, fpr_q, degIndex);
        poly_mul_autoadj_fft(k, t, degIndex);
        poly_mul_autoadj_fft(p, t, degIndex);
        i_fft(k, degIndex);
        i_fft(p, degIndex);
        b_norm = fpr_zero;
        for (counter = 0; counter < elemNum; counter++)
        {
            b_norm = fpr_add(b_norm, fpr_sqr(k[counter]));
            b_norm = fpr_add(b_norm, fpr_sqr(p[counter]));
        }
        if (!fpr_lt(b_norm, fpr_bnorm_max))
        {
            continue;
        }

        if (c == NULL)
        {
            c2 = (uint16_t *)temp;
            temp2 = c2 + elemNum;
        }
        else
        {
            c2 = c;
            temp2 = (uint16_t *)temp;
        }
        if (!compute_public(c2, a, b, degIndex, (uint8_t *)temp2))
        {
            continue;
        }


        lim = (1 << (max_FG_bits[degIndex] - 1)) - 1;
        if (!solve_ntru(degIndex, A, B, a, b, lim, (uint32_t *)temp))
        {
            continue;
        }


        break;
    }
}
